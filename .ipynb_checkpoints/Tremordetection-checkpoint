{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a2debd6e-145f-4fab-8cbc-4ab82f4c0dc0",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Python Code to Analyze Tremors\n",
    "\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from scipy.fftpack import fft\n",
    "from scipy.signal import butter, filtfilt\n",
    "\n",
    "# Load CSV file (modify path)\n",
    "file_path = \"C:\\Users\\garin\\OneDrive\\Numpy 2025\\Datathon feb2025\\accelerometer_data.csv\"\n",
    "df = pd.read_csv(file_path)\n",
    "\n",
    "# Assuming column names are 'Time', 'X', 'Y', 'Z'\n",
    "df['Time'] = pd.to_datetime(df['Time'])  # Convert Time column to datetime\n",
    "df['Time_s'] = (df['Time'] - df['Time'].iloc[0]).dt.total_seconds()  # Convert to seconds\n",
    "\n",
    "# Compute Vector Magnitude (VM) - Overall motion intensity\n",
    "df['VM'] = np.sqrt(df['X']**2 + df['Y']**2 + df['Z']**2)\n",
    "\n",
    "# Apply High-Pass Filter to remove slow movement trends\n",
    "def highpass_filter(data, cutoff=0.5, fs=50, order=2):\n",
    "    nyquist = 0.5 * fs  # Nyquist Frequency\n",
    "    normal_cutoff = cutoff / nyquist\n",
    "    b, a = butter(order, normal_cutoff, btype='high', analog=False)\n",
    "    return filtfilt(b, a, data)\n",
    "\n",
    "df['Filtered_VM'] = highpass_filter(df['VM'])\n",
    "\n",
    "# Plot Time-Series Data\n",
    "plt.figure(figsize=(12, 5))\n",
    "plt.plot(df['Time_s'], df['Filtered_VM'], label=\"Filtered VM\", color=\"blue\")\n",
    "plt.xlabel(\"Time (s)\")\n",
    "plt.ylabel(\"Acceleration (m/sÂ²)\")\n",
    "plt.title(\"Filtered Accelerometer Data (Tremor Detection)\")\n",
    "plt.legend()\n",
    "plt.show()\n",
    "\n",
    "# Frequency Analysis using FFT\n",
    "fs =100  # Assume 50Hz sampling frequency (adjust as per device)\n",
    "N = len(df['Filtered_VM'])\n",
    "fft_vals = fft(df['Filtered_VM'])\n",
    "frequencies = np.fft.fftfreq(N, d=1/fs)  # Frequency bins\n",
    "\n",
    "# Extract only positive frequencies\n",
    "positive_freqs = frequencies[:N//2]\n",
    "fft_magnitude = np.abs(fft_vals[:N//2])\n",
    "\n",
    "# Plot Frequency Spectrum\n",
    "plt.figure(figsize=(10, 5))\n",
    "plt.plot(positive_freqs, fft_magnitude, color=\"red\")\n",
    "plt.xlabel(\"Frequency (Hz)\")\n",
    "plt.ylabel(\"Magnitude\")\n",
    "plt.title(\"Frequency Spectrum (Tremor Detection)\")\n",
    "plt.xlim(0, 10)  # Focus on 0-10Hz range\n",
    "plt.show()\n",
    "\n",
    "# Detect Tremor Frequency (Peak in 4-6 Hz range)\n",
    "tremor_range = (positive_freqs >= 4) & (positive_freqs <= 6)\n",
    "tremor_freqs = positive_freqs[tremor_range]\n",
    "tremor_mags = fft_magnitude[tremor_range]\n",
    "\n",
    "if max(tremor_mags) > np.mean(fft_magnitude) * 2:  # Check if there's a significant peak\n",
    "    print(f\"Possible tremor detected at {tremor_freqs[np.argmax(tremor_mags)]:.2f} Hz\")\n",
    "else:\n",
    "    print(\"No significant tremor detected\")\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
