{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "a2debd6e-145f-4fab-8cbc-4ab82f4c0dc0",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAA+UAAAHUCAYAAABceomrAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/bCgiHAAAACXBIWXMAAA9hAAAPYQGoP6dpAAB7h0lEQVR4nO3dd3hUZfr/8c+khxBCL6EGpINURURBLIhURexSRF0ritiwrAIW7GVRUXcV1JXyVZHFCogUWRRBQVRYpBep0gKEkvL8/nh+k8wkk2QmmeRMJu/XdZ1rZs6ccs850+7zNJcxxggAAAAAAJS6CKcDAAAAAACgvCIpBwAAAADAISTlAAAAAAA4hKQcAAAAAACHkJQDAAAAAOAQknIAAAAAABxCUg4AAAAAgENIygEAAAAAcAhJOQAAAAAADiEpBwAPU6ZMkcvl8jndd9992rJli1wul6ZMmZJnnS1btmTPmzp1ql555ZVSj98fvl5DYWbPni2Xy6Vq1arp5MmTJRdcAIYPH65GjRo5HUaJ+/LLLzV27NhS3efYsWO93vsVKlRQvXr1dPHFF2vixIk6cuRIkbe9dOlSjR07VocOHQpewB7ef/991ahRQ0eOHMnzOvKbzjvvvBKJJRQ0atQo+3VGREQoKSlJLVu21NChQzV37txibfuNN94I6Hsk2PspyndZUXTv3l2jRo0q0X0AKN+inA4AAELR5MmT1aJFC695ycnJqlWrlr7//ns1adKkwPWnTp2q3377LWz+yL3zzjuSpAMHDmjWrFm66qqrHI6o/Pjyyy/1+uuvl3piLklff/21kpKSdOrUKe3cuVPz58/XAw88oOeff16fffaZ2rVrF/A2ly5dqnHjxmn48OGqXLlyUONNS0vTww8/rAcffFCJiYm66aab1Lt37+znd+3apUGDBmnkyJG69tprs+dXqlQpqHGEmm7duumFF16QJB09elTr1q3T9OnTdfHFF+vyyy/XtGnTFB0dHfB233jjDVWvXl3Dhw8PcsT+7adOnTp+fR8X1xNPPKGLLrpIt912m5o3b16i+wJQPpGUA4APbdq0UefOnX0+d9ZZZ5VyNDmOHz+u+Pj4Ut3n7t279eWXX+r888/X0qVL9c4774RlUp6WlqYKFSo4HUap8ef1durUSdWrV89+fPXVV+vOO+9Ujx49NGDAAP3xxx+KjY0t6VD99t5772n//v266aabJEn16tVTvXr1sp9312Zp0KBBgZ/j9PR0uVwuRUWF/t+kzMxMZWRkFHgeKleu7PV6L7zwQt1xxx0aO3asxo0bp0cffVTPPvtsaYQbVLGxsaXyfdyjRw81b95cL774ot5+++0S3x+A8ofq6wAQAH+qS5533nn64osvtHXrVq8qsm6nTp3Sk08+qRYtWig2NlY1atTQDTfcoH379nltp1GjRurXr59mzpypDh06KC4uTuPGjZNkE+VbbrlF9erVU0xMjFJSUjRu3DhlZGR4bWPnzp268sorlZiYqKSkJF111VXavXt3QK/5vffeU0ZGhu655x4NGjRI8+fP19atW/Msd+jQId17771q3LixYmNjVbNmTfXp00f/+9//spc5efKkxo8fr5YtWyouLk7VqlVTz549tXTp0uxljDF644031L59e8XHx6tKlSoaPHiwNm3aVGis/q573nnnqU2bNlq8eLHOPvtsVahQQSNGjJAkbdu2Tddff71q1qyp2NhYtWzZUi+++KKysrKy13e/D55//nk9++yzatSokeLj43Xeeefpjz/+UHp6usaMGaPk5GQlJSXpsssu0969e/PEO2PGDHXt2lUJCQmqWLGiLr74Yq1cuTL7+eHDh+v111+XJK/3kju5DMbrDVS7du30yCOPaNu2bZoxY0b2/Hnz5mngwIGqV6+e4uLidNppp+mWW27RX3/9lb3M2LFjdf/990uSUlJSsl/PwoULs49Hr169VKdOHcXHx6tly5YaM2aMjh075ldskyZNUv/+/QMqgV+4cKFcLpc++OAD3Xvvvapbt65iY2O1YcMGSdI333yjCy64QJUqVVKFChXUrVs3zZ8/32sb7mryq1ev1hVXXKGkpCRVrVpVo0ePVkZGhtatW6fevXsrMTFRjRo10nPPPZcnjkDed88995yefPJJpaSkKDY2VgsWLPD79eaOu3Xr1nrttdd04sSJ7Pn+fEc1atRIv//+uxYtWpR9Hj2bk6Smpuq+++5TSkqKYmJiVLduXY0aNSrPuczKytLEiROz38PuCwizZ88udD/5fR8vWbJEF1xwgRITE1WhQgWdffbZ+uKLL7yWcTc7WrBggW677TZVr15d1apV06BBg7Rz5848x2rIkCGaOnVqsZpuAEC+DAAg2+TJk40k88MPP5j09HSvyRhjNm/ebCSZyZMn51ln8+bNxhhjfv/9d9OtWzdTu3Zt8/3332dPxhiTmZlpevfubRISEsy4cePMvHnzzL/+9S9Tt25d06pVK5OWlpa93YYNG5o6deqYxo0bm3fffdcsWLDA/Pjjj2bXrl2mfv36pmHDhuatt94y33zzjXniiSdMbGysGT58ePb6aWlppmXLliYpKclMnDjRzJkzx9x1112mQYMGeV5DQZo1a2bq1KljMjIyzDfffGMkmbFjx3otk5qaalq3bm0SEhLM+PHjzZw5c8wnn3xi7r77bvPtt98aY4xJT083PXv2NFFRUea+++4zX375pZk9e7Z5+OGHzbRp07K3dfPNN5vo6Ghz7733mq+//tpMnTrVtGjRwtSqVcvs3r07e7lhw4aZhg0besXh77o9evQwVatWNfXr1zcTJ040CxYsMIsWLTJ79+41devWNTVq1DBvvvmm+frrr82dd95pJJnbbrste333+6Bhw4amf//+5vPPPzf//ve/Ta1atUyzZs3MkCFDzIgRI8xXX31l3nzzTVOxYkXTv39/r1ifeuop43K5zIgRI8znn39uZs6cabp27WoSEhLM77//bowxZsOGDWbw4MFGktd76cSJE0F5vfl5/PHHjSSzb98+n8//73//M5LMjTfemD1v0qRJZsKECWb27Nlm0aJF5r333jPt2rUzzZs3N6dOnTLGGLN9+3YzcuRII8nMnDkz+/UcPnzYGGPME088YV5++WXzxRdfmIULF5o333zTpKSkmJ49e+Ybq9v27duNJPPGG2/ku4z7vD3//PPZ8xYsWGAkmbp165rBgweb2bNnm88//9zs37/ffPDBB8blcplLL73UzJw503z22WemX79+JjIy0nzzzTd5jlfz5s3NE088YebNm2ceeOABI8nceeedpkWLFuYf//iHmTdvnrnhhhuMJPPJJ59krx/o+65u3bqmZ8+e5uOPPzZz587N/u7xpWHDhqZv3775Pj9mzBgjyXz33XfGGP+/o37++WfTuHFj06FDh+zz+PPPPxtjjDl27Jhp3769qV69unnppZfMN998Y1599VWTlJRkzj//fJOVlZW9/yFDhhiXy2Vuuukm85///Md89dVX5qmnnjKvvvpqofvx9X28cOFCEx0dbTp16mRmzJhhZs2aZXr16mVcLpeZPn169nLu7+3GjRubkSNHmjlz5ph//etf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9eGHH+rOO+/UJZdcoscee0zffvttvlWkL7nkEk2bNk1TpkzJtwp7v3799Mwzz+jPP//UlVde6VecwVjX7YILLtCECRP0888/q2PHjtnz33//fblcLvXs2bNI283t4osvVlRUlDZu3Jin2nRuniV3nsPhBeP1FsUvv/yip59+Wo0aNcrerztJzH0h4K233sqzfn4lkYFsw5cWLVpIkjZu3KjWrVv7tU5BunXrpsqVK2vNmjW68847i729gpTW+y63cePGac2aNXr44YezS/MD+Y4q6Hvu6aefVrVq1ZSSkpLv+pdccokmTJigSZMmafz48QHvJ7eEhAR16dJFM2fO1AsvvJD9ecnKytK///1v1atXL09zIH/t3LlTJ06cUKtWrYq0PgAUhKQcAEpA27ZtNXPmTE2aNEmdOnVSRESEOnfurKuvvloffvih+vTpo7vvvltnnnmmoqOjtWPHDi1YsEADBw7UZZddVuC2x48fr3nz5unss8/WXXfdpebNm+vEiRPasmWLvvzyS7355puqV6+ehg4dqpdffllDhw7VU089paZNm+rLL7/UnDlzCo3/t99+048//qjbbrvNZ5LdrVs3vfjii3rnnXd05513atSoUZoxY4YGDhyoMWPG6Mwzz9Tx48e1aNEi9evXTz179tQ111yjyZMn69Zbb9W6devUs2dPZWVladmyZWrZsqWuvvpqdevWTX/72990ww03aMWKFerevbsSEhK0a9cuLVmyRG3bttVtt93mM+birOt2zz336P3331ffvn01fvx4NWzYUF988YXeeOMN3XbbbUX+Q59bo0aNNH78eD3yyCPatGmTevfurSpVqmjPnj368ccflZCQkD38Xdu2bSVJzz77rC655BJFRkbq9NNPD8rrLcxPP/2kpKQkpaena+fOnZo/f74++OAD1axZU5999ll2FecWLVqoSZMmGjNmjIwxqlq1qj777DPNmzcvzzbdr+fVV1/VsGHDFB0drebNm+vss89WlSpVdOutt+rxxx9XdHS0PvzwQ/3yyy9+xdqlSxfFx8frhx9+yNNOuCgqVqyoiRMnatiwYTpw4IAGDx6smjVrat++ffrll1+0b98+TZo0qdj7kUr+fXfo0CH98MMPkmy763Xr1mn69On67rvvdOWVV2a/1yQF9B3Vtm1bTZ8+XTNmzFDjxo0VFxentm3batSoUfrkk0/UvXt33XPPPTr99NOVlZWlbdu2ae7cubr33nvVpUsXnXvuuRoyZIiefPJJ7dmzR/369VNsbKxWrlypChUqaOTIkQXux5cJEybooosuUs+ePXXfffcpJiZGb7zxhn777TdNmzatyLUM3MevpC6QACjnnOphDgBCkbtH3ty9Brv52/v6gQMHzODBg03lypWNy+Xy6j07PT3dvPDCC6Zdu3YmLi7OVKxY0bRo0cLccsstZv369dnLFdRr8r59+8xdd91lUlJSTHR0tKlatarp1KmTeeSRR8zRo0ezl9uxY4e5/PLLTcWKFU1iYqK5/PLLzdKlSwvtfd3dW/iqVavyXcbdY/RPP/1kjDHm4MGD5u677zYNGjQw0dHRpmbNmqZv377mf//7X/Y6x48fN4899php2rSpiYmJMdWqVTPnn3++Wbp0qde23333XdOlSxeTkJBg4uPjTZMmTczQoUPNihUrspfxNSSav+v26NHDtG7d2ufr2rp1q7n22mtNtWrVTHR0tGnevLl5/vnnvXpZ99WLtzE5PXl/9NFHXvPze1/NmjXL9OzZ01SqVMnExsaahg0bmsGDB3sNt3Xy5Elz0003mRo1amS/lzzfa8V9vb64exN3T7GxsaZOnTqmV69e5tVXXzWpqal51lmzZo256KKLTGJioqlSpYq54oorzLZt24wk8/jjj3st+9BDD5nk5GQTERFhJJkFCxYYY4xZunSp6dq1q6lQoYKpUaOGuemmm8zPP//s92gBQ4YMMa1atcr3+YJ6X899ztwWLVpk+vbta6pWrWqio6NN3bp1Td++fb2Wz6+3+mHDhpmEhIQ82/R1PorzvitIw4YNs8+jy+UyFStWNM2bNzdDhgwxc+bM8bmOv99RW7ZsMb169TKJiYnZQwS6HT161Dz66KOmefPmJiYmxiQlJZm2bduae+65x2u4vszMTPPyyy+bNm3aZC/XtWtX89lnnxW6H1/fx8YY891335nzzz8/+zNx1llneW3PmPw/k+73g/s96TZkyBDTtm3bwg43ABSJyxgfXagCAACUMStWrNAZZ5yhH374ocjNQ4DcUlNTlZycrJdfflk333yz0+EACEMk5QAAIGxcddVVOnbsmD7//HOnQ0GYGDdunGbMmKHVq1cHZWhMAMiNccoBAEDYePHFF3XGGWfoyJEjToeCMFGpUiVNmTKFhBxAiaGkHAAAAAAAh1BSDgAAAACAQ0jKAQAAAABwCEk5AAAAAAAOCfseK7KysrRz504lJibK5XI5HQ4AAAAAIMwZY3TkyBElJycrIqLgsvCwT8p37typ+vXrOx0GAAAAAKCc2b59u+rVq1fgMmGflCcmJkqyB6NSpUoORwMAAAAACHepqamqX79+dj5akLBPyt1V1itVqkRSDgAAAAAoNf40oaajNwAAAAAAHEJSDgAAAACAQ0jKAQAAAABwSNi3KQcAAACAkpaZman09HSnw0ApiYyMVFRUVFCG3SYpBwAAAIBiOHr0qHbs2CFjjNOhoBRVqFBBderUUUxMTLG2Q1IOAAAAAEWUmZmpHTt2qEKFCqpRo0ZQSk4R2owxOnXqlPbt26fNmzeradOmiogoestwknIAAAAAKKL09HQZY1SjRg3Fx8c7HQ5KSXx8vKKjo7V161adOnVKcXFxRd4WHb0BAAAAQDFRQl7+FKd03Gs7QdkKAAAAAAAIGEk5AAAAAAAOISkHAAAAAGQ777zzNGrUqOzHjRo10iuvvOJYPL64XC7NmjXL6TCCgqQcAAAAAMqZ4cOHy+Vy5Zk2bNigmTNn6oknnsh33VBPiPv3768LL7zQ53Pff/+9XC6Xfv75Z23ZskUul0tRUVH6888/vZbbtWtX9jjkW7ZsKdF4ScoBAAAAoBzq3bu3du3a5TWlpKSoatWqSkxMLPH9p6enl8h2b7zxRn377bfaunVrnufeffddtW/fXh07dsyel5ycrPfff99ruffee09169YtkfhyIykHAAcYI7lcdgIAAOHDGOnYMWcmYwKLNTY2VrVr1/aaIiMj81Rf99SoUSNJ0mWXXSaXy5X9WJI+++wzderUSXFxcWrcuLHGjRunjIyM7OddLpfefPNNDRw4UAkJCXryySf9Wm/9+vXq3r274uLi1KpVK82bN6/A19WvXz/VrFlTU6ZM8ZqflpamGTNm6MYbb/SaP2zYME2ePNlr3pQpUzRs2LAC9xMsJOUA4IBVq5yOAAAAlIS0NKliRWemtLSSf33Lly+XJE2ePFm7du3Kfjxnzhxdf/31uuuuu7RmzRq99dZbmjJlip566imv9R9//HENHDhQv/76q0aMGFHoellZWRo0aJAiIyP1ww8/6M0339SDDz5YYIxRUVEaOnSopkyZIuNxpeKjjz7SqVOndN1113ktP2DAAB08eFBLliyRJC1ZskQHDhxQ//79i3ew/ERSDgAOKKHaWgAAAH77/PPPVbFixezpiiuuKHSdGjVqSJIqV66s2rVrZz9+6qmnNGbMGA0bNkyNGzfWRRddpCeeeEJvvfWW1/rXXnutRowYocaNG6thw4aFrvfNN99o7dq1+uCDD9S+fXt1795dTz/9dKFxjhgxQlu2bNHChQuz57377rsaNGiQqlSp4rVsdHS0rr/+er377rvZy11//fWKjo4udD/BEFUqewEAAACAcqBCBenoUef2HYiePXtq0qRJ2Y8TEhKKvO+ffvpJy5cv9yoZz8zM1IkTJ5SWlqYK/z+4zp07B7Te2rVr1aBBA9WrVy/7+a5duxYaT4sWLXT22Wfr3XffVc+ePbVx40Z99913mjt3rs/lb7zxRnXt2lVPP/20PvroI33//fdeVehLEkk5AAAAAASJyyUVI7ctVQkJCTrttNOCsq2srCyNGzdOgwYNyvNcXFyc1z4DWc/4aCjv8rNTnhtvvFF33nmnXn/9dU2ePFkNGzbUBRdc4HPZNm3aqEWLFrrmmmvUsmVLtWnTRqtKqb0hSTkAAAAAwG/R0dHKzMz0mtexY0etW7cu4CS/sPVatWqlbdu2aefOnUpOTpZkhzXzx5VXXqm7775bU6dO1Xvvvaebb765wIR+xIgRuv32271qD5QGknIAAAAAgN8aNWqk+fPnq1u3boqNjVWVKlX02GOPqV+/fqpfv76uuOIKRUREaPXq1fr111+ze1n3pbD1LrzwQjVv3lxDhw7Viy++qNTUVD3yyCN+xVmxYkVdddVVevjhh3X48GENHz68wOVvvvlmXXHFFapcuXIAR6P46OgNAAAAAOC3F198UfPmzVP9+vXVoUMHSdLFF1+szz//XPPmzdMZZ5yhs846Sy+99JIaNmxY4LYKWy8iIkKffvqpTp48qTPPPFM33XRTnh7dC3LjjTfq4MGDuvDCC9WgQYMCl42KilL16tUVFVW6Zdcu46uSfhhJTU1VUlKSDh8+rEqVKjkdDgBIkn78UerSxd4P729hAADC24kTJ7R582alpKR4tZ1G+Cvo3AeShzpaUr548WL1799fycnJcrlcmjVrltfzxhiNHTtWycnJio+P13nnnafff//dmWABAAAAAAgyR5PyY8eOqV27dnrttdd8Pv/cc8/ppZde0muvvably5erdu3auuiii3TkyJFSjhQAAAAAgOBztKO3Sy65RJdcconP54wxeuWVV/TII49kd4//3nvvqVatWpo6dapuueWW0gwVAAAAAICgC9mO3jZv3qzdu3erV69e2fNiY2PVo0cPLV26NN/1Tp48qdTUVK8JAAAAAIBQFLJJ+e7duyVJtWrV8ppfq1at7Od8mTBhgpKSkrKn+vXrl2icAAAAABDm/WfDh2Cd85BNyt1yD+5ujClwwPeHHnpIhw8fzp62b99e0iECAAAAKKciIyMlSadOnXI4EpS2tLQ0SVJ0dHSxtuNom/KC1K5dW5ItMa9Tp072/L179+YpPfcUGxur2NjYEo8PAAAAAKKiolShQgXt27dP0dHRiogI+XJPFJMxRmlpadq7d68qV66cfWGmqEI2KU9JSVHt2rU1b9687AHpT506pUWLFunZZ591ODoAAAAAsDV769Spo82bN2vr1q1Oh4NSVLly5ezC5OJwNCk/evSoNmzYkP148+bNWrVqlapWraoGDRpo1KhRevrpp9W0aVM1bdpUTz/9tCpUqKBrr73WwagBAAAAIEdMTIyaNm1KFfZyJDo6utgl5G6OJuUrVqxQz549sx+PHj1akjRs2DBNmTJFDzzwgI4fP67bb79dBw8eVJcuXTR37lwlJiY6FTIAAAAA5BEREaG4uDinw0AZ5DJh3k1gamqqkpKSdPjwYVWqVMnpcABAkvTjj1KXLvZ+eH8LAwAAlD+B5KH0QgAAAAAAgENIygEAAAAAcAhJOQAAAAAADiEpBwAAAADAISTlAAAAAAA4hKQcAAAAAACHkJQDAAAAAOAQknIAAAAAABxCUg4AAAAAgENIygEAAAAAcAhJOQAAAAAADiEpBwAAAADAISTlAAAAAAA4hKQcAAAAAACHkJQDAAAAAOAQknIAAAAAABxCUg4AAAAAgENIygEAAAAAcAhJOQAAAAAADiEpBwAAAADAISTlAAAAAAA4hKQcAAAAAACHkJQDAAAAAOAQknIAAAAAABxCUg4AAAAAgENIygEAAAAAcAhJOQAAAAAADiEpBwAAAADAISTlAAAAAAA4hKQcAAAAAACHkJQDAAAAAOAQknIAAAAAABxCUg4AAAAAgENIygEAAAAAcAhJOQAAAAAADiEpBwAAAADAISTlAAAAAAA4hKQcAAAAAACHkJQDAAAAAOAQknIAAAAAABxCUg4AAAAAgENIygEAAAAAcAhJOQAAAAAADiEpBwAAAADAISTlAAAAAAA4hKQcAAAAAACHkJQDAAAAAOAQknIAAAAAABxCUg4AAAAAgENIygEABVq/XnrnHaejAAAACE8hnZRnZGTo0UcfVUpKiuLj49W4cWONHz9eWVlZTocGAOVGs2bSTTdJn3/udCQAAADhJ8rpAAry7LPP6s0339R7772n1q1ba8WKFbrhhhuUlJSku+++2+nwAKBcWbFC6tfP6SgAAADCS0gn5d9//70GDhyovn37SpIaNWqkadOmacWKFQ5HBgAAAABA8YV09fVzzjlH8+fP1x9//CFJ+uWXX7RkyRL16dMn33VOnjyp1NRUrwkAAAAAgFAU0iXlDz74oA4fPqwWLVooMjJSmZmZeuqpp3TNNdfku86ECRM0bty4UowSAAAAAICiCemS8hkzZujf//63pk6dqp9//lnvvfeeXnjhBb333nv5rvPQQw/p8OHD2dP27dtLMWIAAAAAAPwX0iXl999/v8aMGaOrr75aktS2bVtt3bpVEyZM0LBhw3yuExsbq9jY2NIMEwAAAACAIgnpkvK0tDRFRHiHGBkZyZBoAAAAAICwENIl5f3799dTTz2lBg0aqHXr1lq5cqVeeukljRgxwunQAAAAAAAotpBOyidOnKi///3vuv3227V3714lJyfrlltu0WOPPeZ0aAAAAAAAFFtIJ+WJiYl65ZVX9MorrzgdCgAAAAAAQRfSbcoBAAAAAAhnJOUAAAAAADiEpBwAAAAAAIeQlAMAAAAA4BCScgAAAAAAHEJSjoAdPep0BAAAAAAQHkjKEZAxY6TEROnMM52OBAAAAADKPpJyBOTNN+3t8uXOxgEAAAAA4YCkHAAAAAAAh5CUAwAAAADgEJJyAAAAAAAcQlIOAAAAAIBDSMoBAAAAAHAISTkAAAAAAA4hKQcAAAAAwCEk5QAAAAAAOISkHAAAAAAAh5CUAw4zRjp1yukoAAAAADiBpBxwWESEFBsr7d/vdCRAwYxxOgIAAIDwQ1IOhIhFi5yOACjY1KlORwAAABB+SMoBAH7ZsMHpCAAAAMIPSTkAAAAAAA4hKQcAAAAAwCEk5QAAAAAAOISkHAAAAAAAh5CUAwgrq1ZJLpd0xx1ORwIAAAAUjqQcQFi59157+8YbzsYBAAAA+IOkHEBYSU93OgIAAADAfyTlAICwsG2b1KePtGuX05EAAAD4L8rpAAAACIYmTaSMDKlDB2n3bqejAQAA8A8l5QCAsJCRYW/37HE2DgAAgEAUqaQ8PT1du3fvVlpammrUqKGqVasGOy4AAAAAAMKe3yXlR48e1VtvvaXzzjtPSUlJatSokVq1aqUaNWqoYcOGuvnmm7V8+fKSjBUAAAAAgLDiV1L+8ssvq1GjRvrnP/+p888/XzNnztSqVau0bt06ff/993r88ceVkZGhiy66SL1799b69etLOm4AAAAAAMo8v6qvL126VAsWLFDbtm19Pn/mmWdqxIgRevPNN/XOO+9o0aJFatq0aVADBQAAAAAg3PiVlH/00Ud+bSw2Nla33357sQICAAAAAKC8CKj39WPHjmXf37JlS7BjAQAAAACgXPE7Kb/rrrtUr149TZo0SZJ07bXXllhQAAAAAACUB34n5XPnztWePXu0cuVKffLJJyUZEwAAAAAA5YLf45TXq1dPMTExmjRpki677DLt3LmzJOMCAAAAACDs+V1S3rJlS6WnpysyMlJvvfWWKleuXIJhAQAAAAAQ/vwuKZ84cWL2/Tp16mjVqlUlEQ8AAAAAAOVGQL2vS9LXX3+tJUuWZD9+/fXX1b59e1177bU6ePBgUIMDAAAAACCcBZyU33///UpNTZUk/frrr7r33nvVp08fbdq0SaNHjw56gAAAAAAAhCu/q6+7bd68Wa1atZIkffLJJ+rXr5+efvpp/fzzz+rTp0/QAwQAAAAAIFwFXFIeExOjtLQ0SdI333yjXr16SZKqVq2aXYIOAAAAAAAKF3BSfs4552j06NF64okn9OOPP6pv376SpD/++EP16tULeoAAAISTrCzp+uulBQucjgQAAISCgJPy1157TVFRUfr44481adIk1a1bV5L01VdfqXfv3kEPEACAcPLaa9KHH0rnn+90JAAAIBT43aZ87ty56tmzpxo0aKDPP/88z/Mvv/xyUAMDACAcbdjgdAQAACCU+F1Sfuutt6pGjRq66qqrNG3aNB0+fLgk4wIAAAAAIOz5nZRv2rRJixcvVtu2bfXyyy+rVq1auuCCC/SPf/xDW7ZsKbEA//zzT11//fWqVq2aKlSooPbt2+unn34qsf0BAAAAAFBaAmpTfvrpp+vRRx/Vjz/+qE2bNumKK67Q119/rZYtW6pdu3Z67LHHtGLFiqAFd/DgQXXr1k3R0dH66quvtGbNGr344ouqXLly0PYBAAAAAIBTAh6n3C05OVm33nqrbr31Vh07dkxfffWVZs+erd69e2v06NF6+OGHix3cs88+q/r162vy5MnZ8xo1alTs7QIAAAAAEAqKnJR7SkhI0ODBgzV48GBlZWVp//79wdisZs+erYsvvlhXXHGFFi1apLp16+r222/XzTffnO86J0+e1MmTJ7MfM3Y6AAAAACBUFSkp//HHH7Vw4ULt3btXWVlZ2fNdLpdefPFF1ahRIyjBbdq0SZMmTcouef/xxx911113KTY2VkOHDvW5zoQJEzRu3Lig7B8AAAAAgJIUcFL+9NNP69FHH1Xz5s1Vq1YtuVyu7Oc87wdDVlaWOnfurKefflqS1KFDB/3++++aNGlSvkn5Qw89pNGjR2c/Tk1NVf369YMaFwAAAAAAwRBwUv7qq6/q3Xff1fDhw0sgHG916tRRq1atvOa1bNlSn3zySb7rxMbGKjY2tqRDAwAAAACg2ALqfV2SIiIi1K1bt5KIJY9u3bpp3bp1XvP++OMPNWzYsFT2DwAAAABASQo4Kb/nnnv0+uuvl0QsPvf1ww8/6Omnn9aGDRs0depUvf3227rjjjtKZf8AAAAAAJSkgKuv33ffferbt6+aNGmiVq1aKTo62uv5mTNnBi24M844Q59++qkeeughjR8/XikpKXrllVd03XXXBW0fAAAAAAA4JeCkfOTIkVqwYIF69uypatWqBb1zt9z69eunfv36leg+AISP9eudjgAAAADwX8BJ+fvvv69PPvlEffv2LYl4AKBYdu92OgIAAADAfwG3Ka9ataqaNGlSErEAAAAAAFCuBJyUjx07Vo8//rjS0tJKIh4AAAAAAMqNgKuv/+Mf/9DGjRtVq1YtNWrUKE9Hbz///HPQggMAAAAAIJwFnJRfeumlJRAGAAAAAADlT8BJ+eOPP14ScaCMOHzY6QjC19Kl0qBBTkcBAAAAoDQF3KbcH8aYktgsENboNRwAAAAof/xKylu2bKmpU6fq1KlTBS63fv163XbbbXr22WeDEhwAAAAAAOHMr+rrr7/+uh588EHdcccd6tWrlzp37qzk5GTFxcXp4MGDWrNmjZYsWaI1a9bozjvv1O23317ScQMAAAAAUOb5lZSff/75Wr58uZYuXaoZM2Zo6tSp2rJli44fP67q1aurQ4cOGjp0qK6//npVrly5hEMGAAAAACA8BNTR29lnn62zzz67pGIBAAAAAKBcKZGO3gAAAAAAQOFIygEAAAAAcAhJOQAAAAAADiEpBwAAAADAISTlAAAAAAA4JKDe192ysrK0YcMG7d27V1lZWV7Pde/ePSiBAQAAAAAQ7gJOyn/44Qdde+212rp1q4wxXs+5XC5lZmYGLTgAAAAAAMJZwEn5rbfeqs6dO+uLL75QnTp15HK5SiIuAAAAAADCXsBJ+fr16/Xxxx/rtNNOK4l4AAAAAAAoNwLu6K1Lly7asGFDScQCAAAAAEC5EnBJ+ciRI3Xvvfdq9+7datu2raKjo72eP/3004MWHAAAAAAA4SzgpPzyyy+XJI0YMSJ7nsvlkjGGjt4AAAAAAAhAwEn55s2bSyIOAAAAAADKnYCT8oYNG5ZEHEC5l2uEQQAAAADlQMBJuSRt3LhRr7zyitauXSuXy6WWLVvq7rvvVpMmTYIdH1BufP210xEAAAAAKG0B974+Z84ctWrVSj/++KNOP/10tWnTRsuWLVPr1q01b968kogRKBeOH3c6AgAAAAClLeCS8jFjxuiee+7RM888k2f+gw8+qIsuuihowQHlCUk5AAAAUP4EXFK+du1a3XjjjXnmjxgxQmvWrAlKUAAAAAAAlAcBJ+U1atTQqlWr8sxftWqVatasGYyYAAAAAAAoFwKuvn7zzTfrb3/7mzZt2qSzzz5bLpdLS5Ys0bPPPqt77723JGIEAAAAACAsBZyU//3vf1diYqJefPFFPfTQQ5Kk5ORkjR07VnfddVfQAwQAAAAAIFwFnJS7XC7dc889uueee3TkyBFJUmJiYtADAwAAAAAg3AXcptxTYmIiCTlQTkyfLrlc0rp1TkcCAAAAhA+/Sso7duyo+fPnq0qVKurQoYNcLle+y/78889BCw5A6LjmGnt79dXSypXOxgIAAACEC7+S8oEDByo2Njb7fkFJOYDwdviw0xGEh19+cToCAAAAhAK/kvLHH388+/7YsWNLKhYAKDdOnnQ6AgAAAISCgNuUN27cWPv3788z/9ChQ2rcuHFQggIAAM575hnpkUecjgIAgPAWcO/rW7ZsUWZmZp75J0+e1I4dO4ISFAAAcFZGhvT/Rz7V6NFStWrOxgMAQLjyOymfPXt29v05c+YoKSkp+3FmZqbmz5+vlJSU4EYHAECYWb/e6Qj8k5GRc//gQZJyAABKit9J+aWXXirJjlM+bNgwr+eio6PVqFEjvfjii0ENDgCAcPP1105HAAAAQonfSXlWVpYkKSUlRcuXL1f16tVLLCgAAAAAAMqDgNuUb968uSTiAFBG8BUQHKtXOx0BAAAAQkHASbkkHTt2TIsWLdK2bdt06tQpr+fuuuuuoAQGAOHsxAmnIwAAAEAoCDgpX7lypfr06aO0tDQdO3ZMVatW1V9//aUKFSqoZs2aJOUIGdOmSaefLrVu7XQkAAAAAOBbwOOU33PPPerfv78OHDig+Ph4/fDDD9q6das6deqkF154oSRiBAK2fLl07bVSmzZORwIAAAAA+Qs4KV+1apXuvfdeRUZGKjIyUidPnlT9+vX13HPP6eGHHy6JGIGA/fKL0xEAAAAAQOECTsqjo6PlcrkkSbVq1dK2bdskSUlJSdn3AQAAAABA4QJuU96hQwetWLFCzZo1U8+ePfXYY4/pr7/+0gcffKC2bduWRIwAAAAAAISlgEvKn376adWpU0eS9MQTT6hatWq67bbbtHfvXr399ttBD7C82LhReuIJ6f8PBw8gzG3Z4nQEAAAACAUBlZQbY1SjRg21/v/dWdeoUUNffvlliQRW3px2mr3NypIef9zZWACUvL17nY4AAAAAoSCgknJjjJo2baodO3aUVDwFmjBhglwul0aNGuXI/kvDypVORxAeMjOdjgAAAAAAChdQUh4REaGmTZtq//79JRVPvpYvX663335bp59+eqnvG2XPjBlORwAAAAAAhQu4Tflzzz2n+++/X7/99ltJxOPT0aNHdd111+mf//ynqlSpUmr7RdmVluZ0BAAAAABQuIB7X7/++uuVlpamdu3aKSYmRvHx8V7PHzhwIGjBud1xxx3q27evLrzwQj355JMFLnvy5EmdPHky+3FqamrQ4wEAAAAAIBgCTspfeeWVEggjf9OnT9fPP/+s5cuX+7X8hAkTNG7cuBKOCgCK58gRpyMAAABAKAg4KR82bFhJxOHT9u3bdffdd2vu3LmKi4vza52HHnpIo0ePzn6cmpqq+vXrl1SIAFAkO3c6HQEAAABCQcBtyiVp48aNevTRR3XNNddo7/8f1+frr7/W77//HtTgfvrpJ+3du1edOnVSVFSUoqKitGjRIv3jH/9QVFSUMn10sR0bG6tKlSp5TQAAAAAAhKKAk/JFixapbdu2WrZsmWbOnKmjR49KklavXq3HgzzA9gUXXKBff/1Vq1atyp46d+6s6667TqtWrVJkZGRQ9wcAAAAAQGkKuPr6mDFj9OSTT2r06NFKTEzMnt+zZ0+9+uqrQQ0uMTFRbdq08ZqXkJCgatWq5ZkPAAAAAEBZE3BJ+a+//qrLLrssz/waNWo4Mn45AAAAAABlVcAl5ZUrV9auXbuUkpLiNX/lypWqW7du0ALLz8KFC0t8HwAAAAAAlIaAS8qvvfZaPfjgg9q9e7dcLpeysrL03//+V/fdd5+GDh1aEjECAAAAABCWAk7Kn3rqKTVo0EB169bV0aNH1apVK3Xv3l1nn322Hn300ZKIEQAAAACAsBRw9fXo6Gh9+OGHGj9+vFauXKmsrCx16NBBTZs2LYn4AAAAAAAIWwEn5W5NmjRRkyZNghkLAAAAAADlil9J+ejRo/3e4EsvvVTkYAAAAAAAKE/8SspXrlzp18ZcLlexggEAAAAAoDzxKylfsGBBSccBAAAAAEC5E3Dv624bNmzQnDlzdPz4cUmSMSZoQQEAAAAAUB4EnJTv379fF1xwgZo1a6Y+ffpo165dkqSbbrpJ9957b9ADBAAAAAAgXAWclN9zzz2Kjo7Wtm3bVKFChez5V111lb7++uugBgcAAAAAQDgLeEi0uXPnas6cOapXr57X/KZNm2rr1q1BCwwAAAAAgHAXcEn5sWPHvErI3f766y/FxsYGJSgAAAAAAMqDgJPy7t276/33389+7HK5lJWVpeeff149e/YManBAUZ065XQEAAAAAFC4gKuvP//88zrvvPO0YsUKnTp1Sg888IB+//13HThwQP/9739LIkYgYCtXOh0BAAAAABQu4JLyVq1aafXq1TrzzDN10UUX6dixYxo0aJBWrlypJk2alESMAAAAAACEpYBLyiWpdu3aGjduXLBjAQAAAACgXAm4pHzy5Mn66KOP8sz/6KOP9N577wUlKAAAAAAAyoOAk/JnnnlG1atXzzO/Zs2aevrpp4MSFAAAAAAA5UHASfnWrVuVkpKSZ37Dhg21bdu2oAQFAAAAAEB5EHBSXrNmTa1evTrP/F9++UXVqlULSlAAAMBZ6ek593ftci4OAADCXcBJ+dVXX6277rpLCxYsUGZmpjIzM/Xtt9/q7rvv1tVXX10SMZYr//mP0xEAACBlZubcP3bMuTgAAAh3Afe+/uSTT2rr1q264IILFBVlV8/KytLQoUNpUw4AAAAAQAACTspjYmI0Y8YMPfnkk1q1apXi4+PVtm1bNWzYsCTiAwAAAAAgbBVpnHJJatq0qZo2bRrMWAAAAAAAKFcCblM+ePBgPfPMM3nmP//887riiiuCEhQAAAAAAOVBwEn5okWL1Ldv3zzze/furcWLFwclKAAAAAAAyoOAk/KjR48qJiYmz/zo6GilpqYGJSgAAAAAAMqDgJPyNm3aaMaMGXnmT58+Xa1atQpKUAAAwFknT+bc37rVuTgAAAh3AXf09ve//12XX365Nm7cqPPPP1+SNH/+fE2bNk0fffRR0AMEAAClLysr5/7x487FAQBAuAs4KR8wYIBmzZqlp59+Wh9//LHi4+N1+umn65tvvlGPHj1KIkYAAFDKPEvKt2xxLAwAAMJekYZE69u3r8/O3latWqX27dsXNyYAAAAAAMqFgNuU53b48GG98cYb6tixozp16hSMmAAAAAAAKBeKnJR/++23uu6661SnTh1NnDhRffr00YoVK4IZGwAAAAAAYS2g6us7duzQlClT9O677+rYsWO68sorlZ6erk8++YSe1wEAAAAACJDfJeV9+vRRq1attGbNGk2cOFE7d+7UxIkTSzI2AAAAAADCmt8l5XPnztVdd92l2267TU2bNi3JmAAAAAAAKBf8Lin/7rvvdOTIEXXu3FldunTRa6+9pn379pVkbAAAAAAAhDW/k/KuXbvqn//8p3bt2qVbbrlF06dPV926dZWVlaV58+bpyJEjJRknAAAAAABhJ+De1ytUqKARI0ZoyZIl+vXXX3XvvffqmWeeUc2aNTVgwICSiBEAAAAAgLBUrHHKmzdvrueee047duzQtGnTghUTAAAAAADlQrGScrfIyEhdeumlmj17djA2BwAAAABAuRCUpBwAAAAAAASOpBwAAAAAAIeQlAMAAAAA4BCScgAAAAAAHEJSDgAAAACAQ0jKAQAAAABwCEk5AAAAAAAOISkHAAAAAMAhJOUAAAAAADgkpJPyCRMm6IwzzlBiYqJq1qypSy+9VOvWrXM6LAAAwl56es79XbuciwMAgHAX0kn5okWLdMcdd+iHH37QvHnzlJGRoV69eunYsWNOhwYAQFjLzMy5z88uAAAlJ8rpAAry9ddfez2ePHmyatasqZ9++kndu3d3KCoAAAAAAIIjpJPy3A4fPixJqlq1ar7LnDx5UidPnsx+nJqaWuJxAQAAAABQFCFdfd2TMUajR4/WOeecozZt2uS73IQJE5SUlJQ91a9fvxSjBAAAAADAf2UmKb/zzju1evVqTZs2rcDlHnroIR0+fDh72r59eylFCAAAAABAYMpE9fWRI0dq9uzZWrx4serVq1fgsrGxsYqNjS2lyAAAAAAAKLqQTsqNMRo5cqQ+/fRTLVy4UCkpKU6HBABA0AwfLlWpIlWubG/zux8fL7lcpRPT0aPS5s3SrFmlsz8AAMq7kE7K77jjDk2dOlX/+c9/lJiYqN27d0uSkpKSFB8f73B0AAAUz3vv+bdcTEzhiXt+9ytVkiI8GqtlZUm7d0sbN0qbNtnJ8/6ePXn3X6NGsV8qAADIR0gn5ZMmTZIknXfeeV7zJ0+erOHDh5d+QAAABNGECdKhQ9LBgzm3nvcPHbLjhZ86Je3daycnJCU5s18AAMqDkE7KjTFOhwAAQIkZM6bg542x1clzJ+sHDkjr1kk//WSnQ4dKNk5+jgEAKDkhnZQDAFBenTghbdniu4r5pk1SWlrB6yclSXXrSlWr5kxVqtjbxETpyJG8pfO//GIT/twOHiyBFwgAACSRlAMA4Jh9+/Jv2/3nnwWXUEdESPXrS02aSI0b50zux1WqBNY53PHj0jnn2KS8Y0fp7belzp3tcyTlAACUHJJyAABKyKlT0tat3sm2p5o1C16/YsWcJNsz+W7SRGrQwHYAFwzGSLfeKv38s1S9ujRzpnT4cM7zO3YEZz8AACAvknIAAIrIGFuy7Kt6+caNNpnNysp/fZdLqlcvbym3+361aqUzFNrEidL770uRkdL//Z/UsKG0YkXO83/+WfIxAABQXpGUAwBQgPR0ads231XMN26UUlMLXr9CBe9k++WXc547flyKjS3Z+AuzaJE0erS9/8ILUs+e9n5mZs4yhb1GAABQdCTlAIBy79Ch/Nt2b9vmnaD6kpycf9vumjW9S7s9k3KnE/Jt26QrrrCv77rrpLvvznkuPT3n/smTpR8bAADlBUk5ACDsZWTYquT5Jd6FdWQWF5d/FfNGjaT4+FJ5GUF1/Lg0aJDtbK5dO+mxx2yp+YYNdpoyxekIAQAoH0jKAQBh5/nnvZPvrVttYl6Q2rV9J96NG9vnIiJKJ/aSkpkpbd9uE+7166Xbb8957pdfpObNnYsNAIDyjKQcAFAmZGbaDsfya9vt6YEH8q4fGyulpPhOvFNSpISE0nkdJSk93V6AcJd2e06bNnlXSc8tMtIeh9NOs9PGjdJXX5Ve7AAAlFck5SiyY8fC408sgNBx9GjeHszd97dssUOM+ePaa/Mm38nJZb+0W7Ltuzdv9p14b9lScPv3mBjvY9i4sfTGGzYJb9BAio7Oee7zz0nKAQAoDSTlKLKKFaUqVaS6de2QPp6T57ykpNIZ0gdA8Bw6JH30kR0mK5iysqRdu3wPH7Zpk7R3b8HrR0fbNty+2na3a5ez3IcfBjfuYNmyxb/l0tLs8fCVeG/bZodiy098vD0e7hJvz0mSzjjDtiO/9lrp3//O//u5sOr+AAAgOEjKUSwHD9rpt9/yXyYhIW/invtx9erhUYIFlGXp6dKcOTYRnz276D1up6XZklxfiffmzYVvt1q1/DtVq1vXVrMuS7KypHnzpNdek774wvu5Vat8J96FjQtesaLvpPu006Q6dXx/n544IXXvbhPy9u2lf/6z4AumBSX+AAAgeEjKUWSHDtnejHfssH8g3fc9Hx84YKu5//GHnfITE2OrlhaUuNeuLUXxjgWCyhjp559tIj5tmk3Y3Fq3loYNy9s+2xhp9+7823bv3l3wPqOipIYN8+9ULSkp+K/TCQcPSq+8Io0fn/8yHTrk/1zlyvkn3rmHWSuMMdJtt0nLl0tVq0qffmrHTy8Iw6ABAFA6SHFQZElJdmrdOv9l0tJsgp5f0r5jh7Rnj23juGVLwVU7IyJsYl5Q4p6cbIcuAlCwHTtsFe/335fWrMmZX7OmHa/6iitsUrhpk/d6bdrYecePF7z9ypXzH7e7fv3wucBmjLR/v3cp98cfS7//7t/6NWrkn3hXrRq8ON94ww5xFhEhzZhhmwAAAIDQ4DImvCuopaamKikpSYcPH1alSpWcDidfniUeoXxGSiLO9HTbxjS/pH3HDmnnTv/bN1avLv31V/DjLCmex/Sii2wyU7myba/vvp/f49hYZ+IM5WNKnPk7elSaOdMm4t9+m3e/7gRx27bCq09HRNiOwXxVMW/c2L4/S1tJHVN3zYDcVcw3brS3hw8Xvo2OHW2b99NOkx55pGTizM9330nnn2+/Q194Qbr3Xv/Wmz5duuaanMeh/HkCACDUBJKHhklZBcqy6Gj7575Bg/yXycqyHUD5Sto97x8/7p2QlzXz5gW2fFxc4Ym752PPeUlJ3j0tI/ycPGlLtf/1L+mllwpfft8+7+rriYk2yV61KmfenDk26W7YMLzeP1lZ9rvEV/vujRttM5xAREdLL79sq/9XrOj9nGdSXtJ27JAGD7YJ+TXXSKNHl96+AQCAf0jKUSa4q67Xri117ux7GWNsG84//5ROP7104wuW99+3r+HQIe8p97zDh+3rPXHCluAV1oY3PwkJ/ifyCD3uqtO+2nYvXFj4+i6XrUqeX9vuatXsMp4l0L16ldjLKXGZmbYWQH6Jd0FtqCMi7IWI006zx2nHDnuBwnPc7+Rk6ZZbpJtvtp2tOe3ECenyy+0FzXbt7MWZQNuhAwCAkkdSjrDhctk2mLnHTn/vPWno0LIxLNuQIf4tl5UlpaYWnLgXlNwfPWq3c+yYnXbsCPILQdCkp0tbt/pOvDdtsu8Df519th0Gy518N2xYuk0gStNXX+VNvDdv9k6ic4uKklJSfLfvbtTIJu3vv2/bZ3u2w+/RQ7rjDunSS0On9oAxNqYff/S/Y7fc6OgNAIDSQVKOsHLkiHTZZd7zhg+3bSPfftuWCoayK6+0f+z79LEl1PmJiMgpxS6KjAxb2u5Pqbz78fffF21fKNzBg3l7MHff37bNXoQpirPPtu2H+/YNr+T7xAmbYOdOuj316eN73ZiY/MfwbtDAdwd0a9ZI99xjE3L3Ba2EBHux7/bbbed3oebNN6V337XfFdOn24sNuR09avvr2LXL960/tS0QvjZutDU+Ar2YAwAIHEk5wsb+/faP+I8/es+PjZW+/tr2Ev/CC7ZqaaiWmn/0kZ2ioqSePW2CPnCg7WU+mKKibNXkatX8XydUj5mnzz93OgLfMjKk7du9E25PhfWyHR/vXcW8USObOC1ZYoe4OnUqZ9kuXWyNi6uusp0ellVpaTkdqeWetm8vvGp127a+E29/xznPyJD+8x/p9delBQty5rdoYUughw6VQrXv0K++shcLJFttffVq+x2YO+l2X2AAclu3zr7XJZoxAEBpoPf1EEGP0cWzY4dt67p2rU009+/PeW7tWmnEiJyS3vPPl/75T5vghALPY/rww9KsWd5VYyXpzDNtgn7ppVLLlqUYnIdQPfeSrSExerRtM+upNOM8fDj/cbu3brXtmQtSp47v4cMaN7Z9Kbhc0vr10gcfSP/+ty0pdmvQwCbiQ4ZIzZsH/7WV1LlPTc0/8d65s+B1ExPzJtw33lj8OHfvtt8Pb72V0wN9RIS9OHbnnfZiWXEvUBXleBpj3+cFlWzv2mXfI4GoWNG2ha9TJ+/tRx/Z76NAY0XZ969/2QvYEucdAIoqkDyUpDxEhHLC4ykU41y/3g4ltnWrLQWbO9d77HRjbEI0caJNeo8ft9XxJkywf7IjIpyLXfJ9TP/4w/4ZnjUrb7Xx5s1zEvQzzyy9+EPx3Et2uKdhw7yTVLdgxpmZaS/+5Jd4HzhQ8PqxsbYKsTvZnjgx57ljx/KvInrggPR//2erTnu+FxIT7VjiQ4dK555bsu+D4pz7gwd9J90bNtgOyApSubLUtKnvEu8aNfImx0WN0xhp6VJbKv7xxzntzmvWtInJLbcEt+mLZ5zu/iEKS7Z37rS1BwJRr549Vvkl3XXq2PdRfl54Qbr//pzHofS5R8kiKQeA4iMp90BSHlyhFufKlVLv3vbPfdOmdkixhg3zj3PjRummm3LaSnbrZttdNmtWqmF7KeyY7tolffaZ7ahp/nzvjqpq17YleJddZkvwYmKcizNYTp60idzBgzYh9XV78KA9LvPnF7ytQOM8csS7EzXP5HvLloI7CZNsEpffuN116ngnzgUdz1OnbBXk99+3VfLd1dMjIqSLL7Yl4gMHll5bz4JiNcYOQ5hf4l3YxQr32Oi+psKq9QcSpy/HjklTp9pk/JdfcuZ37Wov2F1+edHb4htja0/4Sq5ffTVnufh4e6HQX5Uq5Z9kP/aYvUgZE2NrCBW3NhBJeflFUg4Axcc45SgXvvtO6tfPljK1b2+HJ6pZ07YFzU+TJjaRe/tt+2fzv/+1bS7Hj7cdOfnq5MlpdepIf/ubnVJTbbI2a5b0xRe2qu1bb9mpUiXbpv7SS6VLLnG2vWtmZk5Hcvkl1r4S7QMHAi8NDERWlk2Kcvdg7n7sOUa3L9HRtrTb1/BhjRvnHY86EMbY9uEffCBNm+bdBKNdO1sifs01zg+1NXly3sS7sB7gk5N9d67WpImUlFQ6cXtav16aNMlekDt82M6Lj7c9099xh9ShQ/7rGmM7PvSnZPvEicJjcSfkSUn5J9ueJdu5R5dwe/NN+7oiIuxFvGA0zymsyQUAAAgOSspDRKiVQOcnVOL84gtp8GD7p/fcc+2f0KQkWwI+cqT02285y+YX59atNtGdO9c+PuMM+ye9tHtSLuoxPXnSdkA1a5btkMpzrPKYGOmCC2yCPmCALVEvKmNsR1Ht2+fMe+65ghNs9zjqReVy5YyPXrVqzm2lSrYEx3Pb99xje9h3L+OZGL/0knfivXmzd6dovlSvnn/bbn87CfP3Nbo99ZQtFV+3Lmde7drS9dfbUvHTTw/OPvOTmWmTyO+/l7791k6BtE12j3fuq7S7ceP8E8lgK+izlJkpffmlLRWfMydnfpMmtlO04cPtY3+S7UCGCqtcOW9y/dxzOc9v2FD8Hq7/+19bUyY9XXrmGenBB4u+LU9PPin9/e85j0P5twnBRUk5ABQf1dc9kJQX35Ej0s8/SytWSPfdlzPfqTg//NC2Ic7MtCXl//d/tlTxvvukGTPyLl9QnMZIU6bYxO7wYVsS+ve/S2PGlN54w8E491lZttf5WbNsNfc//vDe/lln2Srul15qq/n7s71ly6SZM+2Uu7dwfyUkeCfVnre+5rlvk5LytpHesMGe96VL7ePq1e15Sk31LvX2vDhRmLg429zBc0pIsLUtMjNzpoIeB7Ks5+PvvssbT3y8NGiQTcQvuCB4NTdSU3N6f1+yxCbdK1YUbVu9euVNvFNS7LF0mq/P0r590vPP2ym3ChVsL+179tiEO5Bku0oV/0q24+P9i7Oodu6UOnWy7/srrrDfgcEaKYGkvPwiKQeA4iMp90BSHpi0NGnVKvuHfflye7tune+YnIhz4kTprrvs/euvt1U2//EP++cxLc0mcrfdZkvDAolz507p1lttibtkqwtPnlxwNdZgKYlzv3ZtTkdxuYeIa9Uqp6O4zp1z9p+eLi1ebJPwTz+1SYpbXJx3VdwhQwpOqt1TUdu4Hz9uS7XdJdwPPhhYwlTW9Oxpq6dffnnBHW/5kpFh37/bttlpwwZ7HhcsKPr45m6tWtnRCl57LWdeqPxiGGMvxnmWYI8YkfN8ZGTRql9Xrepfsl2cixDB+syfPCmdd570ww/24sLSpcVrQpHbmDHSs8/mPA6Vc4+SR1IOAMVHUu6BpDx/J0/aaskrVuQk4b//7vuPfP36tnr3zJmlH6d7X+PHS2PH2scjR9oSu3vusUmIJJ1zjk0e2rUr+pBD06fbbe/fb//UjxljS4qK2tmTP0r63P/5p63ePmuWTdQ829xXr25LC7OybE2BI0dynqtUydZEGDTIdqbn+We/uHEaYzvn89WL+aZNhQ+HFRlphwHz1ba7c+ec5dq1s8u6p6go3/eD/difZa+4ovDj6e4szJ1wu6c//rBNNQ4eLN55qFvXXhA480yb1FWtajs/O3zYlq4fPmyn0uzsKysrb7Lt63bXrsI73svNXZ0+v2S7du3SKfEP1mf+b3+zw7dVrmy/w5s0KXZo2YyxF98+/NB7HsoHknIAKD6Scg8k5VZ6uk24PRPwX3/1/ae2dm2bgHfubKdOnaRatUonTl+ysmzy/Y9/2MdDhti2y198YR/XqWN7Cb7mmpz4ihPn3r225+WPPrKPW7Wybc27dCne68hPaR7TQ4ds9dZbb81/mSpVbMdxAwZ4X4wINM6TJ22P5fkl3oF26NaihfTKKzaxatAg/+YFoVLrpDCecS5alDfxXrvWHr9gqV3b9nResaJ09GhOwn3kSGAl6ikp9lzknnwNUeYpK8v20u5OrAtKtgvqrDG36tVzkmrPtuKeIiOlatVs04SKFX1PBT3n6/nY2KJXEw/Ge/Ttt+1QbS6XbSvfu3f+y2Zl2c/+/v32HLhvPe/7us1d0yCUP08ILpJyACg+knIP5TEpz8yU/vc/7wR81Srf1X+rVfNOwDt3tn9w8/uzWdoJT3q6rZL673/bx0lJtmrzqVM2KRs1ypZk567yG4w4P/nEdgC1d6+tFn/PPdITT/huI1ocpXFM9++XZs+2NR3mzSu8KnhsrB373d1RXO6Ey5icobDyG7f7zz8Lfj3uzsFyDx9WubLtoM3dAV+nTrYTtFat/HutZTEpDwVRUfbzlZRka0l43nd//vxVsWLO+nFx9jO0e3dgyXaNGoVXI69d27uJRGke08hI/5P63M9ddVXOdgJ9j2Zl2QuSAwbYx1272uSpoGR7//7iN2UoSqwou0jKAaD4SMo9hHtSnpVlq297JuArV9oqqLklJXkn35075x3Tu6TiLIrjx6Urr7TjNOfWq5ctOW/e3Pe6wYpz/36bjH/wgX3ctKn0zju2x/dgKalj+ueftsr6zJm2JNaz1KtpU9t+edAg+z7IyrLtUt0dxW3cWPC227WzybdndXdfKlbMf9zuhg3ztjmfO1e64QZbahoZKT3yiPToo4F1uhdqSfmBA77H7/7+++DtIyEhbyLt635Bz8XFeR+7zEzbSdquXVLHjjnzW7WS1qwpfsznnGM/v76S7Vq1itYfgWf8WVm2H4SjR3OmY8e8H+ee/Hk+kDHF/bFvX+Gl17nnFVVior0QW726ndz385s3cqT9PnALhc8TSgdJOQAUH+OUhyljbHVWdwK+YoX000854+x6SkiwJYyeCXiTJnl7tA5Vhw/bkqDFi73nN2okvfyyNHBg6ZSKVatmS2mvuspWFV2/Xure3VZvnzAhuJ0qBcPGjTk9pv/wg/dz7dvbJHzQIJtYuVz2PXXwoE2wd+ywbYrPO8+2Jy5ozO5ffsm5X6+e7+HDmjSxf+79OU/HjkkPPCC98YZ93KyZvRBy5pmBHoHSZ4w9Vr4S7w0bitbuu1kzmwg3alRwIl2pkp0C6aU9M9OWXO/aZd/P+bXb3rPHd0dpwUjIJdsL/KZNOdXfMzLs91adOsEZ+cDlsrVa4uNtqXuwZGb6Tt7dbf+3brXf0+7bvXsL3l5xYqtZ017cyi/J9ky2q1YNvG+MsvJ7AQBAWUdSHqKMsSWdngn4ihW+S0ni4mwv4Z4JePPmwRtPOT+XXFJ4J1dFub9/vx23ObfmzW3Ha5mZtuOygrYTbH372jb5991nSxBee82W4P/rX3boKqcYY8dkdyfiq1d7P3/22VL//jmdn23caC8yeFY393VRpzBffGET70aNit8x1g8/2J7H3eNijxxpx1ouyrjNuUt0pk61baBTUmzpa1Ev5Bhjk9X8Eu/CagwkJ+cdRuzKK/OPuygyMnKS7YI6Sduzp3hVmR97LG/pdq1avi8MZGXZodj+97+80+7dOW3Lv/3We72EBN/t1k87rXQ6YktPtzUcCmpznXtecTrdq1y58FLr6tVtzZH//tcen1Wr7PEoSeE84gEAAKGE6ushwjNZ6NfPJuC+xluOjrZVhz0T8FatnBlTu6wI9jt83jxbrW/rVvv45pvtGMhJSUXbXu4qt4Ud46ws20zBnYi7e5/PrVUrW9V227aiDQ1VkOIc06wsW9J46JAd6mzatJzn7rzTtpE9dizw6ejRgjuPi4+3FxHcSbrn/ZQUe/527Mg/8S6o2rK7fXzuxNvd23dCgu913Ao6nhkZOeNoF5Rs793rf7IdEWFjKuxigi/B+jwdOmSHW1y71jtZ37Ah//drRITvjuZatrSJq69jmp7uXwdnnveLcqHKrUqVwkutBw3KWd7dP0Zh/vlP29u6y2Uvil1ySdFj9Ffv3t6d54X3vwV4ovo6UP4884z00EO24OmOO5yOJjzQptxDWUzKc2vTRrrwQtvxVvfuzlaZDrT9uefka57n/PwSqsqVC1839+Q5pFZJvMOPHs354pLs0FJvvy316RP4tjyP6Xnn2bbybdt6L3PypC31feGF4FUfzk+FCrbNebNmObfNmtlSd7cPPiha4lwSbXIL0r27He98x47ivw8iI21VYV+Jd0pK4CW4nud91qyCk21/Y4+IsJ2feZZk16xpj7s78fzrL5vkb9uW/zaaNbPvwdNPt7eXXprz/IUX2qrQ1ar5vnXfr1IlsGr1bqdO2RocuUvW1661zSr8lZJik+xA1vHkcuUk2IUl2e77/r7mQPs9+P57qUcPe4Hhqaekhx8u2msKFEl5+UVSDpQ/odYnTzggKfcQDkm5v+snJ9upbt2c+7kfV6lSvH1RUu5t8WLpxhtzSquHDrVt3qtW9X8b+R3TgQNtNf2SEB1t23x7Jt7u2/x63y/Jc5+SYktuizq5e7hOSLBJqdurr9pzs2aNrSJdnPdClSr2+HiWrrsnzyHa0tNtLRd/Srb9FRmZN9nOfVunji1VX7PGDne4erW9Xbs2/2rIderYpNszAW/ZMu8FhqKe+6Qk70Td8zYhIacXf2NsKb8xtpT84EHfJdlHjxYtDpfL7tefKuLu+1WqlFwTIM/jmZZmL4RERtpbzwuOkn2/dOpkby+/3A7VWNzP4okT9hh7TgcO5H2cu9f98P63AE8k5UD5Q1IefCTlHspLUh5slSrlTepr1ZJGj85Z5uWXbRKQnm5vfU0FPXfihPTVV3n3HRub0/GTv9srqNpuSb/D09JsO9uXX7Zx1KolTZokXXaZ93JZWbafgNzDh3lW3w4ml8tW0faVeDdoEHgppud79MILA0+c9+2z1aHcJbR9+tg/fnXqBP7ajh+3x86zevnGjfZ28+aC142LsxckPEu669SxxyMjw8a3ebOdtmyxt8WpzuyPM84oePiv6tW9E8SjR21fAp7J96+/2kTKl4QEW+PGM/lu29Ymn/7I7yJNx462ev6ePTmdxpWmmJicC0lZWdI333g/HxVlO1KrXNkev/xq2Hg+9ve54iyXO87cXC6boOeuxu9y2Qsd7udK+n2ZW3j/W4AnknKg/CEpDz56Xw8DjRrZ0pFOneyfyuPHbftPz86Rdu60SV4gY//6KzXVTv/7X/7LdO1q/yBWrmynQKrvLlli2w97io21iVvuMcf9kZXlnaQXtX13UVSoYKuVDx5se2nfti2nzegVV9gEatMmm9ydOhX8/Scne1czd99v3Djw3pZ9+esv247eU+7HBTFGmjzZjil/5IhNEF9+WbrppoIvRh09mpNo55527PBv35dfnreqeXKyd6/SJ096l2xHRNj251Wq2M9dVpYtfQ7W56xBA9sUYPr0nHnNm0utW9vEuXVrW00+IsLuc/16O6SdZwKe34UHz6rnngl4o0b+96SdlubfEFzG2NEffvopoJcfVKdO2YsTv/3m+72UkWHPa2lfLCgud40BX/MPHSr1cFAOFdQ/B4rm++/t796CBbZZEQB4oqQ8RARSUn7RRfaPfe3atkQ7MTH/28REmzSmp9uE1zOZ90zu3VNxxsCNibHJuWeinvt+WpodSiy3nj2lL78MXs/KJXW1LyvL/sF3l3J7lnhv2mRLDAsSFWUTJM+hw+6/3//99+hhS6ndCfhppwW/j4H0dNsj+pw5dvrpp7zHcP16+/4rbN979tjOqWbPto+7dbO9vzdubB8fPpx/x2q+Ojr0VKmSvQCRO+n2HEN+1Ci7r5o1c97/uauRB/Kej47OqSruWW08MtLW/Dh50t4eOZJTyl4SHe1JhVc9NyYnwfan93D3bTDb/A8caC8y5FdFPCnJ+7Oanp5Tdf3AgZxbz/u+bo8dC17M/oqNtReY4uPt+U1Pt+f/1Cl7Pxx/WcPxNcG3bt2kpUvt/VA/73/8Yb9ve/VyOpKCub/rzj0373Cvoeavv+z3NMoXSsqDj+rrHsIxKQ+W6tVtwlK3bk47T/ef5WrVcsZATky0f0AzM20y6daokU2qDh8u3hBLbhERdn/5JfT+3HdXyS7OF8vx4zaZ8ky43fc3b7ZJV0GqVrWlWZ7HJDFRmjvXVlOOjLTP7dxpt9mjR85yUVG2lN2ddFevbjtVmzHDrhMXZ8fzfvDBog0Zlp/Nm3OS8G+/zds51umn5x1uTcppw+1r+v576d13vbcxcKDdlzvx/uuvguOqVi1v0l2vnt3vqVM5paCeSXYgpfhu0dEFVx9331atGvjYzRkZtmTfnaRv3mwvaniWlAcqIcH2ru8+1u6hBHMn20Ud0io62jt5Xriw6LG6Valih+dLTs4ZZz335B6DvVKlgo/zoUO2rfyaNXZaudIOFVYSNVGQI7z/LcDTWWdJy5bZ+6F+3t2/96tW2dFpQpU7zgoVnLmQ6K+33pJuvdXeD/VzX1YcPWovHnXs6HQkBSMpDz6Scg8k5eVLQoJN0P/8M2fewYN2vrsjLmNsCW7ukm73/cKqurp74XaXdHuWejdunNNb/N69tpQ4kM7a8vs0/vqrdPfdttqbZIffev55O9Z1Ud47R4/aRMudiLvHCHerVs2WOlx8sb2tU8d7PxUqBL96Y+vW9ljWr2/PV4UK9gJJ7qS7OONB59ajh212MGCArX1SkrKybMnT1KnSO++UXgIZG+t/7+Hu24oVvc+35/0hQ3IuxuWeglkjIDHRljgXdhEMpSeU/y189JF07732Io2TI5SEi7KYlF93Xd7OCUNJWUl4uneXvvvO3g/lODMyvP/XhTL3uV+40LsgJtSUlfdoWUJS7oGkHMGUkGAT8pgYWwrpT8l5IAr6NBpjxyW/996cMdK7d7c9jLdvX/h2f/klJwlfssQmPG6RkbaPgIsvtsMgdezoXVKZleXd0dgDD9iS8yVLit4jdnHVrJnTRtyzRHv48Jxl3D16r11rS1KXLLG3mzbl3V79+tI559hqm+ecY9t3F9b7tjG2VkFBVcS//Tb/seRLWkKC1KVLTlt19+S+cFSYQ4fse+7GG3Pm5fceNcZeRPFM0jdutBchvviiuK8EoSCU/y24f0NvuUV6801nYwkHJOXBV1YSnrKSlP/4o/19k0I7Tinn3DdubH8XQ1VZeY9KdhjiXr1srd1QRlLugaQcZU1cnC0ldpcWe06xsfbq8Ndf511v+HCbmMbE2KvHhw/bDsLcf6x8ad7cVinu3dtWzXaPX71tm0383fe3by+ZdtHBVru2d1v0hQtt1e7oaHvrvr9vn/1B/+EHe3wK6jiucmU7GkDjxjbp9Ey89+8PTgdwF15Y+BBd1av7brJw/LjtkPH3322HZ7//bqeCeqGvW9c7UW/TxlaHr1jR1oD47DM7KsBXX+Ut0W/QwLl23HBWKP9bcP+GDhwozZrlaChhgaQ8+MpKwpOYmHOxPZTjLItJuRTasZaVOD/4wA5BLIV2nBJJuReScgCh7v77847X7Wv87lOncqbcHYt5PnfqlK3mH8hY6EBhQvnfQllJynfutJ21/vvfUocOTkeTvy5dbNIjhfZ5l8pmUp6SYjuJDGSKiwts+ZiYov23LCuJGUl58JWVOOPjc2qphnKcEkOiAUCZ8vzzTkcAhIdQ/4PWq5dt996xY2jH6k7IUTIKqskULBERgSfy8fElH1ewrF3rdARwSrj2NUNSDgAAwoJ7+MVQ9fvvTkcQvspSzaClS23TI8/pxIm884oyuS/2ZGXZ5kjhOub8p586HQEQXCTlAAAAKNOKMhymU7p2LZntGmObLxUnqX/55ZKJLdjmzs2573LZ/mLq1rXDpvqakpOlGjVs7QEU7rrrbG2LUJzCFUk5AAAIWZmZto+E/fulAwdyOll0TwcOOB0hSpN7pIcjR+yEHC6X7RA2Ntb/UTZy80zK27a1t+7S90Bui7JOILfHj3vHnZ4ubdlip+KqXTsnma9Vy1brj421Cb3nra95vp7z1KmTPU8lOUlFX89t6tTiH0cEho7eQgQdvQEAyoLISN8jRCQk5HQw5R7pwD3ygfv25Ek7jODhw/bWczp8ODjxdeliR0twT02a2Nvk5MKHOSxpZaUjJc84N20quNQqMrLg510ue2HFnUT7mlJT/X/+6NH8RwMpK8e0rMQJhLpQ/ixJdPQGAABKiGeCFYqWLSt4KMhQ8f773hcsPG99zfNnGXcSHEyNGwd3e6Up9ygW+d3681xmph0CM/dtfvPcj93zPL37bs4y6el2ct8/eTLvdOpUzu2JE3Zyz8tvSk935pgDKJoyUVL+xhtv6Pnnn9euXbvUunVrvfLKKzr33HP9WpeScgAAAAAIL6GexQaSh4Z8c/kZM2Zo1KhReuSRR7Ry5Uqde+65uuSSS7Rt2zanQwMAAAAAoFhCvqS8S5cu6tixoyZNmpQ9r2XLlrr00ks1YcKEQtenpBwAAAAAwktoZ7FhVFJ+6tQp/fTTT+rVq5fX/F69emnp0qU+1zl58qRSU1O9JgAAAAAAQlFIJ+V//fWXMjMzVatWLa/5tWrV0u7du32uM2HCBCUlJWVP9evXL41QAQAAAAAIWEgn5W6uXHW7jTF55rk99NBDOnz4cPa0ffv20ggRAAAAAICAhfSQaNWrV1dkZGSeUvG9e/fmKT13i42NVWxsbGmEBwAAAABAsYR0SXlMTIw6deqkefPmec2fN2+ezj77bIeiAgAAAAAgOEK6pFySRo8erSFDhqhz587q2rWr3n77bW3btk233nqr06EBAFBufPihlJoqHT7sfZvfvJMng7dvl0uqVElKSrK3nveTkqS33w7evlA0kZH2XCQlSZUr59z3nCpWlGJipOhoKSJCysqyvSe7b933PR97Pp+ebt9XJ07Y25MnpXffdfqVS7GxUkKCVKFCzhQba9+3mZnSvn3Sli05yw8YYJeJj8+ZPB+77xe0jHv7Ut4eqAt7XNAyyck58958056rqKicW/fk7+PISO8RhjzPcVaWPT6Zmd6PC3rePa9374BOUZG4XDZ+9xQRkf/jzEzp+PGc92ZWVsnHh/AS8kOiSdIbb7yh5557Trt27VKbNm308ssvq3v37n6ty5BoAACUXYmJNuEpKAHZs6f04wqmihVz7ud+fVlZ/MkHAF9CPYsNJA8tE0l5cZCUAwAAAIHJXcotFf7Yn2WCsc7Rozn3ExNLb79FWWfv3pz77i6xSmO/gW7DszZHYVyunFoRnrUHIiN9z/MVS2amrf1y6lTOrfu+vxchQz2LDSQPDfnq6wAAwHk//BCafyQlqV27nPurV5fefnNXy83IsNVXPSd3desTJ6Qbb8y7j1C3c2fOfaeSmoK2UaWKvT37bOnLL32vk5HhfR48qxm773tOBc0rbB3P552u3RAZaau5x8baZgPu+74eu+d9/HHO+hkZzsVemNdek0aOtPdTU52NpTCe78V8RnQOCbm/z0JVzZq2SUi4ISkHAACF6tLF6QgKN3Cg1Lat01HkzzMpf+klm/Skp3vfFud+oOtlZhYec506JXc8gulvf7Pt1kOJMbbk78QJ287e7fLLC0+OA3mc3zKRkYHHXFZqbnbt6nQEcMqKFVLDhnYKJyTlAACgTKtXT9qxQxo1yulICmaMdOiQd4LmJHenWbkT+0mTpHHjnI4uMO4qzKHE5cpJkt0GDvQujQ41DRtKW7c6HUXhOnWSWrSQOnZ0OhL/PfCA0xGEhwYNQrskv6hCekg0AACAwmzfbv+knXee05EULlQScsn2Hh0dbXvzrlRJqlrVtnm94QanIwvcuec6HUHBUlOlf/5TmjnT6UgK9vLL9rZFC2fj8MfatXZUiLKieXOnI0Aoo6O3EFFWqgsBAMqWuDibbFWtKlWr5n3f/bhy5ZxhltzT3LnS3/+es53w/reA3I4csb3eR4R48U1Wlq0eXqGC05GED2P4XxpMU6dK//qXNH9+aB/X1auliy+WFiwoGxdlygJ6X/dAUg4AcEtMlOrWtWPx1q0r1ahh26FGR9vv4aysnB5gT570vu/5OPe8EydsteSDB20nT+GmalVp/36nowAAoOyg93UAAHw4ckT63//sBP+lpDgdAQAA4YukHMildm073EKlSrYK17Zttr1ioNq1sx2RdOokde5sewSOj8+7HLUkSkdcnD2niYl2qlQp57Hnbe55FSrYc2SM9yQVb17//jmxffpp8bdXkvM8O8/q1s279+b8en52D0EUjqXGwRQRYdvwVq5s33MVK9oek0vrHGdmSmlpdszfo0elY8d8V1Nv1qxEDwMAAOUa1ddDBIlZ/iIjc9o+Vqlik6QKFWyC63nref/uu4u+r5iYwifJJut//lm0/TRoILVvb6fx44u2jbKuSpWcDo/S020V4Ny3xRXK325lZTxQyZlYMzNzxv71d/L83I8c6d86R45Ihw+XzmsKpogIewGxVi17m/t+lSr2+zC/KSam8N+dPXvstiTbG/ett5b86wIAIFzQptwDSXnJ8ew0qGJF34lyQYlzQbf+/GEsiOe6LVp4twP1nDIyin8cgsnXp9FdmpW7RNJ9/9SpnAQjLS1ncj/2Nf/Ysfyf87xNT/cv7k6dpJ49pfPPl845JzhD07hft69kvaDbiy8u+HiGCpLy4CtOnO7xhAO5COD5udu/X9q920579tjbkyeD+/pKQ0JCTnJfpYr0xRd2/tq1dPwDAEAgaFMOn2rUsGO51q9vb+vVswm1vwlzbKx3L6xlpdOftWvzfy4rKyehyz3l7tSpKJNnJ1CbNkm//GJL5gLhcklRUXaKiyvesSgOz4RnxQr7Bz0hoWT3537dQEnzHE+4pIes8vwsHT2ak9ynpuYk9J7Jvef9PXtKNrZjx+x31aZN3vMrVizZ/QIAUJ7xd7cMqF49J5GuX9/7fnKyfT4pKfSHLQlFERE5f8SdYEzZPG+dOjkdARAeEhK8L261bl287WVl2cT68GE7pabm3D98WPrrL99Jf2pqwdt1V2MHAADBR1IegkK5eiiCqyw2W0Bw3HCDNHmy01Eg3ERE5HRmWK9e0bdz8mROQl+3LjVWAAAoSWWwjA4Ayr7u3Z2OAMhfbKxt8nTaab5HjQAAAMFDUg4ADmjVyukIAAAAEApIyoEQ0bmz0xGgNDVv7nQEAAAACAUk5SGmfn2nI4BTRo92OgKUpqQkO879oUNOR+K/e+5xOoKCnX++vb38cmfjAAAACARJeYjp2NHpCMJDly5ORxC4yy5zOgKUtuRkm5yXFYUMsem4+fOlnTuljz92OpKCjRzpdAQAACCUkJQjIImJTkfgn0svdToC/xljJyfHIA8ndeo4HQGcVBbOf0mPgw4AAMoWknIE5M8/pZtvlnbscDqSgg0a5HQE4SslxekICnbTTU5HABRszBh7+8QTzsYBAABCAyOPIiCJidLbbzsdReGaNZM2b5Zq1XI6kvATEeKX8saPt53mXXih05GEn/79nY4gPFSoYGvHAAAASJSUI4w1asT4usF088329qWXnI3DHwMG2MQHwZGZKe3ZI3Xq5HQkAAAA4YekHIBf3n7blu4NGOB0JChtERFSzZpORwEAABCeSMoBAAAAAHAISTkAAAAAAA4hKQ8xPXs6HQEAAAAAoLTQ+3qIOHJEWrxY6tPH6UgAAAAAAKWFkvIQUbEiCTkAAAAAlDck5QAAAAAAOISkHAAAAAAAh5CUAwAAAADgEJJyAAAAAAAcQlIOAAAAAIBDSMoBAAAAAHAISTkAAAAAAA4hKQcAAAAAwCEk5QAAAAAAOISkHAAAAAAAh5CUAwAAAADgEJJyAAAAAAAcQlIOAAAAAIBDSMoBAAAAAHBIlNMBlDRjjCQpNTXV4UgAAAAAAOWBO/9056MFCfuk/MiRI5Kk+vXrOxwJAAAAAKA8OXLkiJKSkgpcxmX8Sd3LsKysLO3cuVOJiYlyuVxOh5Ov1NRU1a9fX9u3b1elSpWcDgf54DyVDZyn0Mc5Khs4T2UD5yn0cY7KBs5T2VBWzpMxRkeOHFFycrIiIgpuNR72JeURERGqV6+e02H4rVKlSiH95oLFeSobOE+hj3NUNnCeygbOU+jjHJUNnKeyoSycp8JKyN3o6A0AAAAAAIeQlAMAAAAA4BCS8hARGxurxx9/XLGxsU6HggJwnsoGzlPo4xyVDZynsoHzFPo4R2UD56lsCMfzFPYdvQEAAAAAEKooKQcAAAAAwCEk5QAAAAAAOISkHAAAAAAAh5CUAwAAAADgEJLyEvTGG28oJSVFcXFx6tSpk7777rsCl1+0aJE6deqkuLg4NW7cWG+++WaeZT755BO1atVKsbGxatWqlT799NOSCr9cCOQczZw5UxdddJFq1KihSpUqqWvXrpozZ47XMlOmTJHL5coznThxoqRfSlgL5DwtXLjQ5zn43//+57Ucn6XgC+Q8DR8+3Od5at26dfYyfJ6Ca/Hixerfv7+Sk5Plcrk0a9asQtfhd6n0BXqe+G0qfYGeI36XnBHoeeJ3qfRNmDBBZ5xxhhITE1WzZk1deumlWrduXaHrheNvE0l5CZkxY4ZGjRqlRx55RCtXrtS5556rSy65RNu2bfO5/ObNm9WnTx+de+65WrlypR5++GHddddd+uSTT7KX+f7773XVVVdpyJAh+uWXXzRkyBBdeeWVWrZsWWm9rLAS6DlavHixLrroIn355Zf66aef1LNnT/Xv318rV670Wq5SpUratWuX1xQXF1caLyksBXqe3NatW+d1Dpo2bZr9HJ+l4Av0PL366qte52f79u2qWrWqrrjiCq/l+DwFz7Fjx9SuXTu99tprfi3P75IzAj1P/DaVvkDPkRu/S6Ur0PPE71LpW7Roke644w798MMPmjdvnjIyMtSrVy8dO3Ys33XC9rfJoESceeaZ5tZbb/Wa16JFCzNmzBifyz/wwAOmRYsWXvNuueUWc9ZZZ2U/vvLKK03v3r29lrn44ovN1VdfHaSoy5dAz5EvrVq1MuPGjct+PHnyZJOUlBSsEGECP08LFiwwkszBgwfz3SafpeAr7ufp008/NS6Xy2zZsiV7Hp+nkiPJfPrppwUuw++S8/w5T77w21R6/DlH/C45ryifJX6XSt/evXuNJLNo0aJ8lwnX3yZKykvAqVOn9NNPP6lXr15e83v16qWlS5f6XOf777/Ps/zFF1+sFStWKD09vcBl8tsm8leUc5RbVlaWjhw5oqpVq3rNP3r0qBo2bKh69eqpX79+eUor4L/inKcOHTqoTp06uuCCC7RgwQKv5/gsBVcwPk/vvPOOLrzwQjVs2NBrPp8n5/C7VDbx2xS6+F0qW/hdKn2HDx+WpDzfX57C9beJpLwE/PXXX8rMzFStWrW85teqVUu7d+/2uc7u3bt9Lp+RkaG//vqrwGXy2ybyV5RzlNuLL76oY8eO6corr8ye16JFC02ZMkWzZ8/WtGnTFBcXp27dumn9+vVBjb+8KMp5qlOnjt5++2198sknmjlzppo3b64LLrhAixcvzl6Gz1JwFffztGvXLn311Ve66aabvObzeXIWv0tlE79NoYffpbKH36XSZ4zR6NGjdc4556hNmzb5Lheuv01RTgcQzlwul9djY0yeeYUtn3t+oNtEwYp6PKdNm6axY8fqP//5j2rWrJk9/6yzztJZZ52V/bhbt27q2LGjJk6cqH/84x/BC7ycCeQ8NW/eXM2bN89+3LVrV23fvl0vvPCCunfvXqRtwj9FPaZTpkxR5cqVdemll3rN5/PkPH6XyhZ+m0ITv0tlD79Lpe/OO+/U6tWrtWTJkkKXDcffJkrKS0D16tUVGRmZ52rM3r1781y1catdu7bP5aOiolStWrUCl8lvm8hfUc6R24wZM3TjjTfq//7v/3ThhRcWuGxERITOOOMMrqAWUXHOk6ezzjrL6xzwWQqu4pwnY4zeffddDRkyRDExMQUuy+epdPG7VLbw21S28LsUuvhdKn0jR47U7NmztWDBAtWrV6/AZcP1t4mkvATExMSoU6dOmjdvntf8efPm6eyzz/a5TteuXfMsP3fuXHXu3FnR0dEFLpPfNpG/opwjyZZCDB8+XFOnTlXfvn0L3Y8xRqtWrVKdOnWKHXN5VNTzlNvKlSu9zgGfpeAqznlatGiRNmzYoBtvvLHQ/fB5Kl38LpUd/DaVPfwuhS5+l0qPMUZ33nmnZs6cqW+//VYpKSmFrhO2v02l269c+TF9+nQTHR1t3nnnHbNmzRozatQok5CQkN2D45gxY8yQIUOyl9+0aZOpUKGCueeee8yaNWvMO++8Y6Kjo83HH3+cvcx///tfExkZaZ555hmzdu1a88wzz5ioqCjzww8/lPrrCweBnqOpU6eaqKgo8/rrr5tdu3ZlT4cOHcpeZuzYsebrr782GzduNCtXrjQ33HCDiYqKMsuWLSv11xcuAj1PL7/8svn000/NH3/8YX777TczZswYI8l88skn2cvwWQq+QM+T2/XXX2+6dOnic5t8noLryJEjZuXKlWblypVGknnppZfMypUrzdatW40x/C6FikDPE79NpS/Qc8TvkjMCPU9u/C6Vnttuu80kJSWZhQsXen1/paWlZS9TXn6bSMpL0Ouvv24aNmxoYmJiTMeOHb269x82bJjp0aOH1/ILFy40HTp0MDExMaZRo0Zm0qRJebb50UcfmebNm5vo6GjTokULry90BC6Qc9SjRw8jKc80bNiw7GVGjRplGjRoYGJiYkyNGjVMr169zNKlS0vxFYWnQM7Ts88+a5o0aWLi4uJMlSpVzDnnnGO++OKLPNvksxR8gX7nHTp0yMTHx5u3337b5/b4PAWXe1im/L7D+F0KDYGeJ36bSl+g54jfJWcU5TuP36XS5ev8SDKTJ0/OXqa8/Da5jPn/LeMBAAAAAECpok05AAAAAAAOISkHAAAAAMAhJOUAAAAAADiEpBwAAAAAAIeQlAMAAAAA4BCScgAAAAAAHEJSDgAAAACAQ0jKAQAAAABl3uLFi9W/f38lJyfL5XJp1qxZJbq/jIwMPfroo0pJSVF8fLwaN26s8ePHKysrK6DtkJQDABBmxo4dq/bt2zu2/7///e/629/+5tey9913n+66664SjggAUB4cO3ZM7dq102uvvVYq+3v22Wf15ptv6rXXXtPatWv13HPP6fnnn9fEiRMD2o7LGGNKKEYAABBkLperwOeHDRum1157TSdPnlS1atVKKaoce/bsUdOmTbV69Wo1atSo0OX37t2rJk2aaPXq1UpJSSn5AAEA5YLL5dKnn36qSy+9NHveqVOn9Oijj+rDDz/UoUOH1KZNGz377LM677zzirSPfv36qVatWnrnnXey511++eWqUKGCPvjgA7+3Q0k5AABlyK5du7KnV155RZUqVfKa9+qrr6pixYqOJOSS9M4776hr165+JeSSVLNmTfXq1UtvvvlmyQYGACj3brjhBv33v//V9OnTtXr1al1xxRXq3bu31q9fX6TtnXPOOZo/f77++OMPSdIvv/yiJUuWqE+fPgFth6QcAIAypHbt2tlTUlKSXC5Xnnm5q68PHz5cl156qZ5++mnVqlVLlStX1rhx45SRkaH7779fVatWVb169fTuu+967evPP//UVVddpSpVqqhatWoaOHCgtmzZUmB806dP14ABA7zmffzxx2rbtq3i4+NVrVo1XXjhhTp27Fj28wMGDNC0adOKfWwAAMjPxo0bNW3aNH300Uc699xz1aRJE913330655xzNHny5CJt88EHH9Q111yjFi1aKDo6Wh06dNCoUaN0zTXXBLQdknIAAMqBb7/9Vjt37tTixYv10ksvaezYserXr5+qVKmiZcuW6dZbb9Wtt96q7du3S5LS0tLUs2dPVaxYUYsXL9aSJUtUsWJF9e7dW6dOnfK5j4MHD+q3335T586ds+ft2rVL11xzjUaMGKG1a9dq4cKFGjRokDxbz5155pnavn27tm7dWrIHAQBQbv38888yxqhZs2aqWLFi9rRo0SJt3LhRkrRlyxa5XK4CpzvvvDN7mzNmzNC///1vTZ06VT///LPee+89vfDCC3rvvfcCii0qqK8UAACEpKpVq+of//iHIiIi1Lx5cz333HNKS0vTww8/LEl66KGH9Mwzz+i///2vrr76ak2fPl0RERH617/+ld2OffLkyapcubIWLlyoXr165dnH1q1bZYxRcnJy9rxdu3YpIyNDgwYNUsOGDSVJbdu29Vqvbt26kuyfIfcyAAAEU1ZWliIjI/XTTz8pMjLS67mKFStKsr9Ha9euLXA7VapUyb5///33a8yYMbr66qsl2d+3rVu3asKECRo2bJjfsZGUAwBQDrRu3VoRETkV5GrVqqU2bdpkP46MjFS1atW0d+9eSdJPP/2kDRs2KDEx0Ws7J06cyC5RyO348eOSpLi4uOx57dq10wUXXKC2bdvq4osvVq9evTR48GCvPzXx8fGSbOk8AAAloUOHDsrMzNTevXt17rnn+lwmOjpaLVq08HubaWlpXr+tkv09DXRINJJyAADKgejoaK/HLpfL5zz3H4msrCx16tRJH374YZ5t1ahRw+c+qlevLslWY3cvExkZqXnz5mnp0qWaO3euJk6cqEceeUTLli3L7m39wIEDBW4XAAB/HD16VBs2bMh+vHnzZq1atUpVq1ZVs2bNdN1112no0KF68cUX1aFDB/3111/69ttv1bZt24A7Z5Ok/v3766mnnlKDBg3UunVrrVy5Ui+99JJGjBgR0HZoUw4AAPLo2LGj1q9fr5o1a+q0007zmpKSknyu06RJE1WqVElr1qzxmu9yudStWzeNGzdOK1euVExMjD799NPs53/77TdFR0erdevWJfqaAADhbcWKFerQoYM6dOggSRo9erQ6dOigxx57TJJthjV06FDde++9at68uQYMGKBly5apfv36RdrfxIkTNXjwYN1+++1q2bKl7rvvPt1yyy164oknAtoOJeUAACCP6667Ts8//7wGDhyo8ePHq169etq2bZtmzpyp+++/X/Xq1cuzTkREhC688EItWbIke1zYZcuWaf78+erVq5dq1qypZcuWad++fWrZsmX2et99953OPffc7GrsAAAUxXnnnefVkWhu0dHRGjdunMaNGxeU/SUmJuqVV17RK6+8UqztUFIOAADyqFChghYvXqwGDRpo0KBBatmypUaMGKHjx4+rUqVK+a73t7/9TdOnT8+uBl+pUiUtXrxYffr0UbNmzfToo4/qxRdf1CWXXJK9zrRp03TzzTeX+GsCACAUuUxBlxIAAAACYIzRWWed5fc4rV988YXuv/9+rV69WlFRVOADAJQ/lJQDAICgcblcevvtt5WRkeHX8seOHdPkyZNJyAEA5RYl5QAAAAAAOISScgAAAAAAHEJSDgAAAACAQ0jKAQAAAABwCEk5AAAAAAAOISkHAAAAAMAhJOUAAAAAADiEpBwAAAAAAIeQlAMAAAAA4BCScgAAAAAAHPL/AFXSwkcjIJclAAAAAElFTkSuQmCC",
      "text/plain": [
       "<Figure size 1200x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "ename": "KeyError",
     "evalue": "'ALIGNED'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[2], line 42\u001b[0m\n\u001b[0;32m     40\u001b[0m fs \u001b[38;5;241m=\u001b[39m\u001b[38;5;241m100\u001b[39m  \u001b[38;5;66;03m# Assume 50Hz sampling frequency (adjust as per device)\u001b[39;00m\n\u001b[0;32m     41\u001b[0m N \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mlen\u001b[39m(df[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mFiltered_VM\u001b[39m\u001b[38;5;124m'\u001b[39m])\n\u001b[1;32m---> 42\u001b[0m fft_vals \u001b[38;5;241m=\u001b[39m fft(df[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mFiltered_VM\u001b[39m\u001b[38;5;124m'\u001b[39m])\n\u001b[0;32m     43\u001b[0m frequencies \u001b[38;5;241m=\u001b[39m np\u001b[38;5;241m.\u001b[39mfft\u001b[38;5;241m.\u001b[39mfftfreq(N, d\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m1\u001b[39m\u001b[38;5;241m/\u001b[39mfs)  \u001b[38;5;66;03m# Frequency bins\u001b[39;00m\n\u001b[0;32m     45\u001b[0m \u001b[38;5;66;03m# Extract only positive frequencies\u001b[39;00m\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\scipy\\fftpack\\_basic.py:88\u001b[0m, in \u001b[0;36mfft\u001b[1;34m(x, n, axis, overwrite_x)\u001b[0m\n\u001b[0;32m     12\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mfft\u001b[39m(x, n\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mNone\u001b[39;00m, axis\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m-\u001b[39m\u001b[38;5;241m1\u001b[39m, overwrite_x\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mFalse\u001b[39;00m):\n\u001b[0;32m     13\u001b[0m \u001b[38;5;250m    \u001b[39m\u001b[38;5;124;03m\"\"\"\u001b[39;00m\n\u001b[0;32m     14\u001b[0m \u001b[38;5;124;03m    Return discrete Fourier transform of real or complex sequence.\u001b[39;00m\n\u001b[0;32m     15\u001b[0m \n\u001b[1;32m   (...)\u001b[0m\n\u001b[0;32m     86\u001b[0m \n\u001b[0;32m     87\u001b[0m \u001b[38;5;124;03m    \"\"\"\u001b[39;00m\n\u001b[1;32m---> 88\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m _pocketfft\u001b[38;5;241m.\u001b[39mfft(x, n, axis, \u001b[38;5;28;01mNone\u001b[39;00m, overwrite_x)\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\scipy\\fft\\_pocketfft\\basic.py:17\u001b[0m, in \u001b[0;36mc2c\u001b[1;34m(forward, x, n, axis, norm, overwrite_x, workers, plan)\u001b[0m\n\u001b[0;32m     14\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m plan \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[0;32m     15\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mNotImplementedError\u001b[39;00m(\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mPassing a precomputed plan is not yet \u001b[39m\u001b[38;5;124m'\u001b[39m\n\u001b[0;32m     16\u001b[0m                               \u001b[38;5;124m'\u001b[39m\u001b[38;5;124msupported by scipy.fft functions\u001b[39m\u001b[38;5;124m'\u001b[39m)\n\u001b[1;32m---> 17\u001b[0m tmp \u001b[38;5;241m=\u001b[39m _asfarray(x)\n\u001b[0;32m     18\u001b[0m overwrite_x \u001b[38;5;241m=\u001b[39m overwrite_x \u001b[38;5;129;01mor\u001b[39;00m _datacopied(tmp, x)\n\u001b[0;32m     19\u001b[0m norm \u001b[38;5;241m=\u001b[39m _normalization(norm, forward)\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\scipy\\fft\\_pocketfft\\helper.py:97\u001b[0m, in \u001b[0;36m_asfarray\u001b[1;34m(x)\u001b[0m\n\u001b[0;32m     95\u001b[0m dtype \u001b[38;5;241m=\u001b[39m x\u001b[38;5;241m.\u001b[39mdtype\u001b[38;5;241m.\u001b[39mnewbyteorder(\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m=\u001b[39m\u001b[38;5;124m'\u001b[39m)\n\u001b[0;32m     96\u001b[0m \u001b[38;5;66;03m# Always align input\u001b[39;00m\n\u001b[1;32m---> 97\u001b[0m copy \u001b[38;5;241m=\u001b[39m \u001b[38;5;129;01mnot\u001b[39;00m x\u001b[38;5;241m.\u001b[39mflags[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mALIGNED\u001b[39m\u001b[38;5;124m'\u001b[39m]\n\u001b[0;32m     98\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m np\u001b[38;5;241m.\u001b[39marray(x, dtype\u001b[38;5;241m=\u001b[39mdtype, copy\u001b[38;5;241m=\u001b[39mcopy)\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\pandas\\core\\flags.py:100\u001b[0m, in \u001b[0;36mFlags.__getitem__\u001b[1;34m(self, key)\u001b[0m\n\u001b[0;32m     98\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21m__getitem__\u001b[39m(\u001b[38;5;28mself\u001b[39m, key):\n\u001b[0;32m     99\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m key \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_keys:\n\u001b[1;32m--> 100\u001b[0m         \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mKeyError\u001b[39;00m(key)\n\u001b[0;32m    102\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mgetattr\u001b[39m(\u001b[38;5;28mself\u001b[39m, key)\n",
      "\u001b[1;31mKeyError\u001b[0m: 'ALIGNED'"
     ]
    }
   ],
   "source": [
    "#Python Code to Analyze Tremors\n",
    "\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from scipy.fftpack import fft\n",
    "from scipy.signal import butter, filtfilt\n",
    "\n",
    "# Load CSV file (modify path)\n",
    "file_path = r\"C:\\Users\\garin\\OneDrive\\Numpy 2025\\Datathon feb2025\\accelerometer_data.csv\"\n",
    "\n",
    "df = pd.read_csv(file_path)\n",
    "\n",
    "# Assuming column names are 'Time', 'X', 'Y', 'Z'\n",
    "\n",
    "df['Time'] = pd.to_datetime(df['Time'])  # Convert Time column to datetime\n",
    "df['Time_s'] = (df['Time'] - df['Time'].iloc[0]).dt.total_seconds()  # Convert to seconds\n",
    "\n",
    "# Compute Vector Magnitude (VM) - Overall motion intensity\n",
    "df['VM'] = np.sqrt(df['X']**2 + df['Y']**2 + df['Z']**2)\n",
    "\n",
    "# Apply High-Pass Filter to remove slow movement trends\n",
    "def highpass_filter(data, cutoff=0.5, fs=50, order=2):\n",
    "    nyquist = 0.5 * fs  # Nyquist Frequency\n",
    "    normal_cutoff = cutoff / nyquist\n",
    "    b, a = butter(order, normal_cutoff, btype='high', analog=False)\n",
    "    return filtfilt(b, a, data)\n",
    "\n",
    "df['Filtered_VM'] = highpass_filter(df['VM'])\n",
    "\n",
    "# Plot Time-Series Data\n",
    "plt.figure(figsize=(12, 5))\n",
    "plt.plot(df['Time_s'], df['Filtered_VM'], label=\"Filtered VM\", color=\"blue\")\n",
    "plt.xlabel(\"Time (s)\")\n",
    "plt.ylabel(\"Acceleration (m/s²)\")\n",
    "plt.title(\"Filtered Accelerometer Data (Tremor Detection)\")\n",
    "plt.legend()\n",
    "plt.show()\n",
    "\n",
    "# Frequency Analysis using FFT\n",
    "fs =100  # Assume 50Hz sampling frequency (adjust as per device)\n",
    "N = len(df['Filtered_VM'])\n",
    "fft_vals = fft(df['Filtered_VM'])\n",
    "frequencies = np.fft.fftfreq(N, d=1/fs)  # Frequency bins\n",
    "\n",
    "# Extract only positive frequencies\n",
    "positive_freqs = frequencies[:N//2]\n",
    "fft_magnitude = np.abs(fft_vals[:N//2])\n",
    "\n",
    "# Plot Frequency Spectrum\n",
    "plt.figure(figsize=(10, 5))\n",
    "plt.plot(positive_freqs, fft_magnitude, color=\"red\")\n",
    "plt.xlabel(\"Frequency (Hz)\")\n",
    "plt.ylabel(\"Magnitude\")\n",
    "plt.title(\"Frequency Spectrum (Tremor Detection)\")\n",
    "plt.xlim(0, 10)  # Focus on 0-10Hz range\n",
    "plt.show()\n",
    "\n",
    "# Detect Tremor Frequency (Peak in 4-6 Hz range)\n",
    "tremor_range = (positive_freqs >= 4) & (positive_freqs <= 6)\n",
    "tremor_freqs = positive_freqs[tremor_range]\n",
    "tremor_mags = fft_magnitude[tremor_range]\n",
    "\n",
    "if max(tremor_mags) > np.mean(fft_magnitude) * 2:  # Check if there's a significant peak\n",
    "    print(f\"Possible tremor detected at {tremor_freqs[np.argmax(tremor_mags)]:.2f} Hz\")\n",
    "else:\n",
    "    print(\"No significant tremor detected\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "30ec6b57-5ff2-4651-b49e-59547267bee6",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0         -0.002771\n",
      "1         -0.003182\n",
      "2         -0.005462\n",
      "3         -0.004077\n",
      "4         -0.003549\n",
      "             ...   \n",
      "1048570    0.005759\n",
      "1048571   -0.039817\n",
      "1048572   -0.048536\n",
      "1048573   -0.025052\n",
      "1048574    0.004646\n",
      "Name: Filtered_VM, Length: 1048575, dtype: float64\n"
     ]
    }
   ],
   "source": [
    "print(df['Filtered_VM'])\n",
    "         "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "8072a24a-4343-4fc1-afdc-5be5cf977807",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "ename": "KeyError",
     "evalue": "'Accelerometer_X'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\pandas\\core\\indexes\\base.py:3802\u001b[0m, in \u001b[0;36mIndex.get_loc\u001b[1;34m(self, key, method, tolerance)\u001b[0m\n\u001b[0;32m   3801\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[1;32m-> 3802\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_engine\u001b[38;5;241m.\u001b[39mget_loc(casted_key)\n\u001b[0;32m   3803\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mKeyError\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m err:\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\pandas\\_libs\\index.pyx:138\u001b[0m, in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[1;34m()\u001b[0m\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\pandas\\_libs\\index.pyx:165\u001b[0m, in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[1;34m()\u001b[0m\n",
      "File \u001b[1;32mpandas\\_libs\\hashtable_class_helper.pxi:5745\u001b[0m, in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[1;34m()\u001b[0m\n",
      "File \u001b[1;32mpandas\\_libs\\hashtable_class_helper.pxi:5753\u001b[0m, in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[1;34m()\u001b[0m\n",
      "\u001b[1;31mKeyError\u001b[0m: 'Accelerometer_X'",
      "\nThe above exception was the direct cause of the following exception:\n",
      "\u001b[1;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[5], line 20\u001b[0m\n\u001b[0;32m     17\u001b[0m df[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mTime_s\u001b[39m\u001b[38;5;124m'\u001b[39m] \u001b[38;5;241m=\u001b[39m (df[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mTime\u001b[39m\u001b[38;5;124m'\u001b[39m] \u001b[38;5;241m-\u001b[39m df[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mTime\u001b[39m\u001b[38;5;124m'\u001b[39m]\u001b[38;5;241m.\u001b[39miloc[\u001b[38;5;241m0\u001b[39m])\u001b[38;5;241m.\u001b[39mdt\u001b[38;5;241m.\u001b[39mtotal_seconds()  \u001b[38;5;66;03m# Convert to seconds\u001b[39;00m\n\u001b[0;32m     19\u001b[0m \u001b[38;5;66;03m# Compute Vector Magnitude (VM) - Overall motion intensity\u001b[39;00m\n\u001b[1;32m---> 20\u001b[0m df[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mVM\u001b[39m\u001b[38;5;124m'\u001b[39m] \u001b[38;5;241m=\u001b[39m np\u001b[38;5;241m.\u001b[39msqrt(df[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mAccelerometer_X\u001b[39m\u001b[38;5;124m'\u001b[39m]\u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39m\u001b[38;5;241m2\u001b[39m \u001b[38;5;241m+\u001b[39m df[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mAccelerometer_Y\u001b[39m\u001b[38;5;124m'\u001b[39m]\u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39m\u001b[38;5;241m2\u001b[39m \u001b[38;5;241m+\u001b[39m df[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mAccelerometer_Z\u001b[39m\u001b[38;5;124m'\u001b[39m]\u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39m\u001b[38;5;241m2\u001b[39m)\n\u001b[0;32m     22\u001b[0m \u001b[38;5;66;03m# Apply High-Pass Filter to remove slow movement trends\u001b[39;00m\n\u001b[0;32m     23\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mhighpass_filter\u001b[39m(data, cutoff\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m0.5\u001b[39m, fs\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m50\u001b[39m, order\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m2\u001b[39m):\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\pandas\\core\\frame.py:3807\u001b[0m, in \u001b[0;36mDataFrame.__getitem__\u001b[1;34m(self, key)\u001b[0m\n\u001b[0;32m   3805\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mcolumns\u001b[38;5;241m.\u001b[39mnlevels \u001b[38;5;241m>\u001b[39m \u001b[38;5;241m1\u001b[39m:\n\u001b[0;32m   3806\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_getitem_multilevel(key)\n\u001b[1;32m-> 3807\u001b[0m indexer \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mcolumns\u001b[38;5;241m.\u001b[39mget_loc(key)\n\u001b[0;32m   3808\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m is_integer(indexer):\n\u001b[0;32m   3809\u001b[0m     indexer \u001b[38;5;241m=\u001b[39m [indexer]\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\pandas\\core\\indexes\\base.py:3804\u001b[0m, in \u001b[0;36mIndex.get_loc\u001b[1;34m(self, key, method, tolerance)\u001b[0m\n\u001b[0;32m   3802\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_engine\u001b[38;5;241m.\u001b[39mget_loc(casted_key)\n\u001b[0;32m   3803\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mKeyError\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m err:\n\u001b[1;32m-> 3804\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mKeyError\u001b[39;00m(key) \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01merr\u001b[39;00m\n\u001b[0;32m   3805\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mTypeError\u001b[39;00m:\n\u001b[0;32m   3806\u001b[0m     \u001b[38;5;66;03m# If we have a listlike key, _check_indexing_error will raise\u001b[39;00m\n\u001b[0;32m   3807\u001b[0m     \u001b[38;5;66;03m#  InvalidIndexError. Otherwise we fall through and re-raise\u001b[39;00m\n\u001b[0;32m   3808\u001b[0m     \u001b[38;5;66;03m#  the TypeError.\u001b[39;00m\n\u001b[0;32m   3809\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_check_indexing_error(key)\n",
      "\u001b[1;31mKeyError\u001b[0m: 'Accelerometer_X'"
     ]
    }
   ],
   "source": [
    "#Python Code to Analyze Tremors for subjectid1\n",
    "\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from scipy.fftpack import fft\n",
    "from scipy.signal import butter, filtfilt\n",
    "\n",
    "# Load CSV file (modify path)\n",
    "file_path = r\"C:\\Users\\garin\\OneDrive\\Numpy 2025\\Datathon feb2025\\Update PADS files\\movementsTransformed.csv\"\n",
    "\n",
    "df = pd.read_csv(file_path)\n",
    "\n",
    "# Assuming column names are 'Time', 'X', 'Y', 'Z'\n",
    "df['subject_id']=1\n",
    "df['Time'] = pd.to_datetime(df['Time'])  # Convert Time column to datetime\n",
    "df['Time_s'] = (df['Time'] - df['Time'].iloc[0]).dt.total_seconds()  # Convert to seconds\n",
    "\n",
    "# Compute Vector Magnitude (VM) - Overall motion intensity\n",
    "df['VM'] = np.sqrt(df['Accelerometer_X']**2 + df['Accelerometer_Y']**2 + df['Accelerometer_Z']**2)\n",
    "\n",
    "# Apply High-Pass Filter to remove slow movement trends\n",
    "def highpass_filter(data, cutoff=0.5, fs=50, order=2):\n",
    "    nyquist = 0.5 * fs  # Nyquist Frequency\n",
    "    normal_cutoff = cutoff / nyquist\n",
    "    b, a = butter(order, normal_cutoff, btype='high', analog=False)\n",
    "    return filtfilt(b, a, data)\n",
    "\n",
    "df['Filtered_VM'] = highpass_filter(df['VM'])\n",
    "\n",
    "# Plot Time-Series Data\n",
    "plt.figure(figsize=(12, 5))\n",
    "plt.plot(df['Time_s'], df['Filtered_VM'], label=\"Filtered VM\", color=\"blue\")\n",
    "plt.xlabel(\"Time (s)\")\n",
    "plt.ylabel(\"Acceleration (m/s²)\")\n",
    "plt.title(\"Filtered Accelerometer Data (Tremor Detection)\")\n",
    "plt.legend()\n",
    "plt.show()\n",
    "\n",
    "# Frequency Analysis using FFT\n",
    "fs =100  # Assume 50Hz sampling frequency (adjust as per device)\n",
    "N = len(df['Filtered_VM'])\n",
    "fft_vals = fft(df['Filtered_VM'])\n",
    "frequencies = np.fft.fftfreq(N, d=1/fs)  # Frequency bins\n",
    "\n",
    "# Extract only positive frequencies\n",
    "positive_freqs = frequencies[:N//2]\n",
    "fft_magnitude = np.abs(fft_vals[:N//2])\n",
    "\n",
    "# Plot Frequency Spectrum\n",
    "plt.figure(figsize=(10, 5))\n",
    "plt.plot(positive_freqs, fft_magnitude, color=\"red\")\n",
    "plt.xlabel(\"Frequency (Hz)\")\n",
    "plt.ylabel(\"Magnitude\")\n",
    "plt.title(\"Frequency Spectrum (Tremor Detection)\")\n",
    "plt.xlim(0, 10)  # Focus on 0-10Hz range\n",
    "plt.show()\n",
    "\n",
    "# Detect Tremor Frequency (Peak in 4-6 Hz range)\n",
    "tremor_range = (positive_freqs >= 4) & (positive_freqs <= 6)\n",
    "tremor_freqs = positive_freqs[tremor_range]\n",
    "tremor_mags = fft_magnitude[tremor_range]\n",
    "\n",
    "if max(tremor_mags) > np.mean(fft_magnitude) * 2:  # Check if there's a significant peak\n",
    "    print(f\"Possible tremor detected at {tremor_freqs[np.argmax(tremor_mags)]:.2f} Hz\")\n",
    "else:\n",
    "    print(\"No significant tremor detected\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "fdea1756-1479-49b1-b4d5-e37e77f4a860",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
